/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Sales;

import Customers.CustList;
import Customers.Customer;
import Miscellaneous.DbConnection;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author egimenez
 */
public class SalesFilter extends javax.swing.JDialog {

    /**
     * Creates new form Preferences
     */
    private String fechaVentaIni_ret;
    private String fechaVentaFin_ret;
    private int codClienteIni_ret;
    private int codClienteFin_ret;
    private String nombre_ret;

    public SalesFilter(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.fechaVentaIni_ret = null;
        this.fechaVentaFin_ret = null;
        this.codClienteIni_ret = 0;
        this.codClienteFin_ret = 0;
        this.nombre_ret = null;
        initComponents();
        loadDefaultValues();
        this.jftfCodCliente.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpSelParam = new javax.swing.JPanel();
        jcbAllCust = new javax.swing.JCheckBox();
        jlCodCliente = new javax.swing.JLabel();
        jftfCodCliente = new javax.swing.JFormattedTextField();
        jlFechaVenta = new javax.swing.JLabel();
        jtftFechaVentaIni = new javax.swing.JFormattedTextField();
        jcbAllDate = new javax.swing.JCheckBox();
        jtftFechaVentaFin = new javax.swing.JFormattedTextField();
        jlA = new javax.swing.JLabel();
        jlNombre = new javax.swing.JLabel();
        jbCal1 = new net.sourceforge.jcalendarbutton.JCalendarButton();
        jbCal2 = new net.sourceforge.jcalendarbutton.JCalendarButton();
        jpFunctions = new javax.swing.JPanel();
        jbExecRep = new javax.swing.JButton();
        jbCanc = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jpSelParam.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Parámetros Selección", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jcbAllCust.setText("Todos");
        jcbAllCust.setToolTipText("");
        jcbAllCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAllCustActionPerformed(evt);
            }
        });

        jlCodCliente.setText("Código de cliente");
        jlCodCliente.setToolTipText("");

        jftfCodCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jftfCodCliente.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jftfCodCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jftfCodClienteKeyPressed(evt);
            }
        });

        jlFechaVenta.setText("Fecha doc.");
        jlFechaVenta.setToolTipText("");

        jtftFechaVentaIni.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MM-yyyy"))));
        jtftFechaVentaIni.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jcbAllDate.setText("Todas");
        jcbAllDate.setToolTipText("");
        jcbAllDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAllDateActionPerformed(evt);
            }
        });

        jtftFechaVentaFin.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MM-yyyy"))));
        jtftFechaVentaFin.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jlA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlA.setText("a");
        jlA.setToolTipText("");

        jlNombre.setText("jLabel4");

        jbCal1.setBorder(null);
        jbCal1.setBorderPainted(false);
        jbCal1.setContentAreaFilled(false);
        jbCal1.setOpaque(true);
        jbCal1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jbCal1PropertyChange(evt);
            }
        });

        jbCal2.setBorder(null);
        jbCal2.setBorderPainted(false);
        jbCal2.setContentAreaFilled(false);
        jbCal2.setOpaque(true);
        jbCal2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jbCal2PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jpSelParamLayout = new javax.swing.GroupLayout(jpSelParam);
        jpSelParam.setLayout(jpSelParamLayout);
        jpSelParamLayout.setHorizontalGroup(
            jpSelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSelParamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpSelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jpSelParamLayout.createSequentialGroup()
                        .addComponent(jlFechaVenta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtftFechaVentaIni, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpSelParamLayout.createSequentialGroup()
                        .addComponent(jlCodCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jftfCodCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpSelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpSelParamLayout.createSequentialGroup()
                        .addComponent(jbCal1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlA, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtftFechaVentaFin, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbCal2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jlNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpSelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbAllCust)
                    .addComponent(jcbAllDate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpSelParamLayout.setVerticalGroup(
            jpSelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSelParamLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jpSelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbAllDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpSelParamLayout.createSequentialGroup()
                        .addGroup(jpSelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtftFechaVentaIni)
                            .addComponent(jtftFechaVentaFin)
                            .addComponent(jbCal1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jpSelParamLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jpSelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jlFechaVenta)
                                    .addComponent(jlA)))
                            .addComponent(jbCal2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(3, 3, 3)))
                .addGap(11, 11, 11)
                .addGroup(jpSelParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlCodCliente)
                    .addComponent(jftfCodCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbAllCust)
                    .addComponent(jlNombre))
                .addGap(10, 10, 10))
        );

        jftfCodCliente.getAccessibleContext().setAccessibleName("");
        jtftFechaVentaIni.getAccessibleContext().setAccessibleName("");
        jtftFechaVentaFin.getAccessibleContext().setAccessibleName("");

        jpFunctions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true));

        jbExecRep.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/document-icon.png"))); // NOI18N
        jbExecRep.setToolTipText("Ejecutar el informe");
        jbExecRep.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbExecRep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExecRepActionPerformed(evt);
            }
        });

        jbCanc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/cancel-icon.png"))); // NOI18N
        jbCanc.setToolTipText("Cancelar");
        jbCanc.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbCanc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpFunctionsLayout = new javax.swing.GroupLayout(jpFunctions);
        jpFunctions.setLayout(jpFunctionsLayout);
        jpFunctionsLayout.setHorizontalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFunctionsLayout.createSequentialGroup()
                .addComponent(jbExecRep, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbCanc, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpFunctionsLayout.setVerticalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jbCanc, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jbExecRep, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpFunctions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpSelParam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpSelParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");
        getAccessibleContext().setAccessibleParent(null);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Evento que se dispara cuando se acciona el
     * pulsador de ejecución del informe */
    private void jbExecRepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExecRepActionPerformed

        // Definiciones locales
        int cc;
        DbConnection dbc;
        Connection conDb;
        Customer cust;
        ArrayList<Customer> dataCust;
        SimpleDateFormat sdt1, sdt2;
        Date d1, d2;

        // Verificar las fechas de servicios/ventas inicial y final
        d1 = new Date();
        d2 = new Date();
        sdt1 = new SimpleDateFormat("dd-MM-yyyy");
        sdt2 = new SimpleDateFormat("yyyyMMdd");
        if (this.jcbAllDate.isSelected() == false) {

            // La fecha inicial debe estar informada
            if (this.jtftFechaVentaIni.getText().trim().isEmpty()) {
                this.jtftFechaVentaIni.requestFocus();
                JOptionPane.showMessageDialog(null,
                        "Informar la fecha inicial",
                        null,
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // El formato de la fecha inicial debe ser correcto
            try {
                d1 = sdt1.parse(this.jtftFechaVentaIni.getText());
            } catch (ParseException e) {
                this.jtftFechaVentaIni.requestFocus();
                JOptionPane.showMessageDialog(null,
                        "El formato de la fecha inicial es erróneo"
                        + " " + "(ej.fecha correcta: 31-12-2016)",
                        null,
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // La fecha final debe estar informada
            if (this.jtftFechaVentaFin.getText().trim().isEmpty()) {
                this.jtftFechaVentaFin.requestFocus();
                JOptionPane.showMessageDialog(null,
                        "Informar la fecha final",
                        null,
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // El formato de la fecha final debe ser correcto
            try {
                d2 = sdt1.parse(this.jtftFechaVentaFin.getText());
            } catch (ParseException e) {
                this.jtftFechaVentaFin.requestFocus();
                JOptionPane.showMessageDialog(null,
                        "El formato de la fecha final es erróneo"
                        + " " + "(ej.fecha correcta: 31-12-2016)",
                        null,
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // La fecha inicial no debe superar a la final 
            if (Integer.parseInt(sdt2.format(d1))
                    > Integer.parseInt(sdt2.format(d2))) {
                this.jtftFechaVentaIni.requestFocus();
                JOptionPane.showMessageDialog(null,
                        "La fecha inicial no debe superar a la final",
                        null,
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Verificar el código de cliente
        if (this.jcbAllCust.isSelected() == false) {

            // El codigo de cliente debe estar informado
            if (this.jftfCodCliente.getText().trim().isEmpty()) {
                this.jftfCodCliente.requestFocus();
                JOptionPane.showMessageDialog(null,
                        "Informar el código de cliente",
                        null,
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // El código de cliente debe ser numérico
            try {
                cc = Integer.parseInt(this.jftfCodCliente.getText());
            } catch (NumberFormatException e) {
                this.jftfCodCliente.requestFocus();
                JOptionPane.showMessageDialog(null,
                        "El código de cliente debe ser numérico",
                        null,
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Abrir la conexión a la BBDD  
            try {
                dbc = new DbConnection();
                conDb = dbc.getConBd();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible abrir la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar que el código de cliente existe
            cust = new Customer(cc);
            try {
                dataCust = cust.getCustData(conDb);
                if (dataCust.isEmpty()) {
                    this.jftfCodCliente.requestFocus();
                    JOptionPane.showMessageDialog(null,
                            "El código de cliente no existe",
                            null,
                            JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    this.jlNombre.setText(dataCust.get(0).getNombre());
                }
            } catch (SQLException e) {
                // Mensaje de error
                this.jftfCodCliente.requestFocus();
                JOptionPane.showMessageDialog(null,
                        "No se pudo verificar el código de cliente",
                        null,
                        JOptionPane.ERROR_MESSAGE);
                return;
            } finally {
                // Cerrar la conexión a la BBDD        
                try {
                    conDb.close();

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null,
                            "No fue posible cerrar la conexión a la Base de Datos",
                            null,
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        // Devolver los parámetros de selección
        // al JDialog que ejecuta el report Birt  
        if (this.jcbAllDate.isSelected() == true) {
            this.fechaVentaIni_ret = "00000101";
            this.fechaVentaFin_ret = "99991231";
        } else {
            this.fechaVentaIni_ret = sdt2.format(d1);
            this.fechaVentaFin_ret = sdt2.format(d2);
        }
        if (this.jcbAllCust.isSelected() == true) {
            this.codClienteIni_ret = 0;
            this.codClienteFin_ret = 999999;
            this.nombre_ret = null;
        } else {
            this.codClienteIni_ret = Integer.parseInt(this.jftfCodCliente
                    .getText());
            this.codClienteFin_ret = Integer.parseInt(this.jftfCodCliente
                    .getText());
            this.nombre_ret = this.jlNombre.getText();
        }

        // Cerrar el JDialog
        this.dispose();
    }//GEN-LAST:event_jbExecRepActionPerformed

    /* Evento que se dispara cuando se acciona F1
     * sobre el código de cliente */
    private void jftfCodClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jftfCodClienteKeyPressed

        // Definiciones locales
        CustList cl;

        // Seleccionar el cliente y actualizar su código y nombre  
        // en los objetos correspondientes del JDialog
        if (evt.getKeyCode() == KeyEvent.VK_F1
                && jftfCodCliente.isEditable() == true) {
            cl = new CustList((Frame)this.getParent(), true, true);
            cl.setVisible(true);
            if (cl.getCodCliente_sel() > 0) {
                jftfCodCliente.setText(String.valueOf(cl.getCodCliente_sel()));
                jlNombre.setText(cl.getNombre_sel());
            }
        }
    }//GEN-LAST:event_jftfCodClienteKeyPressed

    /* Evento que se dispara cuando cambia el valor del
     * JCheckBox relacionado las fechas */
    private void jcbAllDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAllDateActionPerformed

        // Desactivar/activar los campos 
        // relacionados con las fechas
        if (this.jcbAllDate.isSelected() == true) {
            this.jtftFechaVentaIni.setEnabled(false);
            this.jtftFechaVentaFin.setEnabled(false);
            this.jbCal1.setEnabled(false);
            this.jbCal2.setEnabled(false);
        } else {
            this.jtftFechaVentaIni.setEnabled(true);
            this.jtftFechaVentaFin.setEnabled(true);
            this.jbCal1.setEnabled(true);
            this.jbCal2.setEnabled(true);
        }
    }//GEN-LAST:event_jcbAllDateActionPerformed

    /* Evento que se dispara cuando cambia el valor del 
     * JCheckBox relacionado con el código de cliente */
    private void jcbAllCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAllCustActionPerformed

        // Desactivar/activar los campos relacionados 
        // con el código de cliente
        if (this.jcbAllCust.isSelected() == true) {
            this.jftfCodCliente.setEnabled(false);
            this.jlNombre.setEnabled(false);
        } else {
            this.jftfCodCliente.setEnabled(true);
            this.jlNombre.setEnabled(true);
        }
    }//GEN-LAST:event_jcbAllCustActionPerformed

    /* Evento que se dispara cuando se acciona el
     * pulsador de cancelar */
    private void jbCancActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancActionPerformed

        // Devolver todos los parámetros de selección vacíos
        // al JDialog que ejecuta el report Birt 
        this.fechaVentaIni_ret = null;
        this.fechaVentaFin_ret = null;
        this.codClienteIni_ret = 0;
        this.codClienteFin_ret = 0;
        this.nombre_ret = null;

        // Cerrar el JDialog
        this.dispose();
    }//GEN-LAST:event_jbCancActionPerformed

    /* Evento que se dispara cuando se selecciona una fecha 
     * del calendario situado al lado de la fecha inicial */
    private void jbCal1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jbCal1PropertyChange

        // Definiciones locales
        SimpleDateFormat sdt;

        // Mover la fecha seleccionada del calendario 
        // al campo fecha inicial
        if (evt.getNewValue() instanceof Date) {
            sdt = new SimpleDateFormat("dd-MM-yyyy");
            this.jtftFechaVentaIni.setText(sdt.format(evt.getNewValue()));
        }
    }//GEN-LAST:event_jbCal1PropertyChange

    /* Evento que se dispara cuando se selecciona una fecha 
     * del calendario situado al lado de la fecha final */
    private void jbCal2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jbCal2PropertyChange

        // Definiciones locales
        SimpleDateFormat sdt;

        // Mover la fecha seleccionada del calendario 
        // al campo fecha final
        if (evt.getNewValue() instanceof Date) {
            sdt = new SimpleDateFormat("dd-MM-yyyy");
            this.jtftFechaVentaFin.setText(sdt.format(evt.getNewValue()));
        }
    }//GEN-LAST:event_jbCal2PropertyChange

    /* Cargar valores por defecto en los objetos del JDialog */
    private void loadDefaultValues() {

        // Definiciones locales
        SimpleDateFormat sdt;

        // Cargar valores por defecto en los objetos del JDialog
        sdt = new SimpleDateFormat("dd-MM-yyyy");
        this.jtftFechaVentaIni.setText(sdt.format(new Date()));
        this.jtftFechaVentaFin.setText(sdt.format(new Date()));
        this.jftfCodCliente.setText(null);
        this.jlNombre.setText(null);
    }

    /* */
    public String getFechaVentaIni_ret() {
        return fechaVentaIni_ret;
    }

    /* */
    public String getFechaVentaFin_ret() {
        return fechaVentaFin_ret;
    }

    /* */
    public int getCodClienteIni_ret() {
        return codClienteIni_ret;
    }

    /* */
    public int getCodClienteFin_ret() {
        return codClienteFin_ret;
    }

    /* */
    public String getNombre_ret() {
        return nombre_ret;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                SalesFilter dialog = new SalesFilter(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private net.sourceforge.jcalendarbutton.JCalendarButton jbCal1;
    private net.sourceforge.jcalendarbutton.JCalendarButton jbCal2;
    private javax.swing.JButton jbCanc;
    private javax.swing.JButton jbExecRep;
    private javax.swing.JCheckBox jcbAllCust;
    private javax.swing.JCheckBox jcbAllDate;
    private javax.swing.JFormattedTextField jftfCodCliente;
    private javax.swing.JLabel jlA;
    private javax.swing.JLabel jlCodCliente;
    private javax.swing.JLabel jlFechaVenta;
    private javax.swing.JLabel jlNombre;
    private javax.swing.JPanel jpFunctions;
    private javax.swing.JPanel jpSelParam;
    private javax.swing.JFormattedTextField jtftFechaVentaFin;
    private javax.swing.JFormattedTextField jtftFechaVentaIni;
    // End of variables declaration//GEN-END:variables
}
