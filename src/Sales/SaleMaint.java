/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

// ---------------------------------------------------------------------------
// MODIFICACIONES: 
//   1. 29.03.2017: - Se permite el precio cero.
//                  - Salir al grabar.  
// ---------------------------------------------------------------------------

package Sales;

import Articles.ArtList;
import Articles.Article;
import Customers.CustList;
import Customers.Customer;
import Miscellaneous.DbConnection;
import Services.ServList;
import Services.Service;
import java.awt.Component;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author egimenek
 */
public class SaleMaint extends javax.swing.JDialog {

    /**
     * Creates new form SaleMaint
     */
    private JTable jtSalesList;
    private int numVenta;
    private Boolean isNewSale;
    private ArrayList<SaleHeader> dataSaleH_ret;
    private Boolean WindowClosing;

    /* Constructor std. */
    public SaleMaint(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /* Constructor propio */
    public SaleMaint(java.awt.Frame parent, boolean modal,
            JTable jtSalesList, int numVenta, Boolean isNewSale) {
        super(parent, modal);
        this.jtSalesList = jtSalesList;
        this.numVenta = numVenta;
        this.isNewSale = isNewSale;
        this.dataSaleH_ret = new ArrayList<SaleHeader>();
        this.WindowClosing = false;
        initComponents();
        if (this.isNewSale.equals(true)) {
            newSale();
        } else {
            loadSale();
        }
        jtfCodCliente.requestFocus();
        //this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialike the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpFunctions = new javax.swing.JPanel();
        jbGyC = new javax.swing.JButton();
        jbModif = new javax.swing.JButton();
        jbNewSaleL = new javax.swing.JButton();
        jbRemSaleL = new javax.swing.JButton();
        jbPrevSale = new javax.swing.JButton();
        jbNextSale = new javax.swing.JButton();
        jbVerify = new javax.swing.JButton();
        jpObs = new javax.swing.JPanel();
        jspObs = new javax.swing.JScrollPane();
        jtaObs = new javax.swing.JTextArea();
        jpSaleLines = new javax.swing.JPanel();
        jspSaleLines = new javax.swing.JScrollPane();
        jtSaleLines = new javax.swing.JTable();
        jpSaleHeader = new javax.swing.JPanel();
        jlNumVenta = new javax.swing.JLabel();
        jtfNumVenta = new javax.swing.JTextField();
        jlCodCliente = new javax.swing.JLabel();
        jtfCodCliente = new javax.swing.JTextField();
        jlNombre = new javax.swing.JLabel();
        jlFechaVenta = new javax.swing.JLabel();
        jtfFechaVenta = new javax.swing.JTextField();
        jbCal = new net.sourceforge.jcalendarbutton.JCalendarButton();
        jpTotals = new javax.swing.JPanel();
        jlServQtyT = new javax.swing.JLabel();
        jlServQtyV = new javax.swing.JLabel();
        jlServSubtT = new javax.swing.JLabel();
        jlServSubtV = new javax.swing.JLabel();
        jlArtQtyT = new javax.swing.JLabel();
        jlArtQtyV = new javax.swing.JLabel();
        jlArtSubtT = new javax.swing.JLabel();
        jlArtSubtV = new javax.swing.JLabel();
        jlTotT = new javax.swing.JLabel();
        jlTotQtyV = new javax.swing.JLabel();
        jlTotAmtV = new javax.swing.JLabel();
        jlEUR = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpFunctions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true));

        jbGyC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/disk-save-yellow-icon.png"))); // NOI18N
        jbGyC.setToolTipText("Grabar el registro de servicios/venta");
        jbGyC.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbGyC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGyCActionPerformed(evt);
            }
        });

        jbModif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/pencil-icon.png"))); // NOI18N
        jbModif.setToolTipText("Modificar el registro de servicios/venta");
        jbModif.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbModif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModifActionPerformed(evt);
            }
        });

        jbNewSaleL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/plus-icon.png"))); // NOI18N
        jbNewSaleL.setToolTipText("Nueva línea");
        jbNewSaleL.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbNewSaleL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNewSaleLActionPerformed(evt);
            }
        });

        jbRemSaleL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/minus-icon.png"))); // NOI18N
        jbRemSaleL.setToolTipText("Eliminar una línea");
        jbRemSaleL.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbRemSaleL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemSaleLActionPerformed(evt);
            }
        });

        jbPrevSale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow-left-icon.png"))); // NOI18N
        jbPrevSale.setToolTipText("Registro de servicios/venta previo");
        jbPrevSale.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbPrevSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrevSaleActionPerformed(evt);
            }
        });

        jbNextSale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow-right-icon.png"))); // NOI18N
        jbNextSale.setToolTipText("próximo registro de servicios/venta");
        jbNextSale.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbNextSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNextSaleActionPerformed(evt);
            }
        });

        jbVerify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/ok-icon.png"))); // NOI18N
        jbVerify.setToolTipText("Verificar la info.");
        jbVerify.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVerifyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpFunctionsLayout = new javax.swing.GroupLayout(jpFunctions);
        jpFunctions.setLayout(jpFunctionsLayout);
        jpFunctionsLayout.setHorizontalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFunctionsLayout.createSequentialGroup()
                .addComponent(jbModif, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbPrevSale, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbNextSale, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbGyC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbNewSaleL, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbRemSaleL, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbVerify, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jpFunctionsLayout.setVerticalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jbNextSale, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jbPrevSale, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jbRemSaleL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbGyC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbModif, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jbNewSaleL, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jbVerify, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jbRemSaleL.getAccessibleContext().setAccessibleDescription("");
        jbNextSale.getAccessibleContext().setAccessibleDescription("");

        jpObs.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Observaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jtaObs.setEditable(false);
        jtaObs.setColumns(20);
        jtaObs.setRows(5);
        jspObs.setViewportView(jtaObs);

        javax.swing.GroupLayout jpObsLayout = new javax.swing.GroupLayout(jpObs);
        jpObs.setLayout(jpObsLayout);
        jpObsLayout.setHorizontalGroup(
            jpObsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspObs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
        );
        jpObsLayout.setVerticalGroup(
            jpObsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspObs, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jpSaleLines.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Datos Líneas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jtSaleLines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jtSaleLines.setEnabled(false);
        jtSaleLines.setRowSelectionAllowed(false);
        jtSaleLines.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtSaleLines.getTableHeader().setReorderingAllowed(false);
        jtSaleLines.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtSaleLinesKeyPressed(evt);
            }
        });
        jspSaleLines.setViewportView(jtSaleLines);

        javax.swing.GroupLayout jpSaleLinesLayout = new javax.swing.GroupLayout(jpSaleLines);
        jpSaleLines.setLayout(jpSaleLinesLayout);
        jpSaleLinesLayout.setHorizontalGroup(
            jpSaleLinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspSaleLines)
        );
        jpSaleLinesLayout.setVerticalGroup(
            jpSaleLinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSaleLinesLayout.createSequentialGroup()
                .addComponent(jspSaleLines, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jpSaleHeader.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Datos Cabecera", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jlNumVenta.setLabelFor(jtfNumVenta);
        jlNumVenta.setText("Núm.doc.");
        jlNumVenta.setToolTipText("");

        jtfNumVenta.setEditable(false);
        jtfNumVenta.setBackground(java.awt.SystemColor.controlHighlight);
        jtfNumVenta.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfNumVenta.setText("jTextField1");

        jlCodCliente.setLabelFor(jtfCodCliente);
        jlCodCliente.setText("Código de cliente");
        jlCodCliente.setToolTipText("");

        jtfCodCliente.setEditable(false);
        jtfCodCliente.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfCodCliente.setText("jTextField2");
        jtfCodCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfCodClienteKeyPressed(evt);
            }
        });

        jlNombre.setToolTipText("");

        jlFechaVenta.setLabelFor(jtfFechaVenta);
        jlFechaVenta.setText("Fecha doc.");
        jlFechaVenta.setToolTipText("");

        jtfFechaVenta.setEditable(false);
        jtfFechaVenta.setText("jTextField8");

        jbCal.setBorder(null);
        jbCal.setBorderPainted(false);
        jbCal.setContentAreaFilled(false);
        jbCal.setOpaque(true);
        jbCal.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jbCalPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jpSaleHeaderLayout = new javax.swing.GroupLayout(jpSaleHeader);
        jpSaleHeader.setLayout(jpSaleHeaderLayout);
        jpSaleHeaderLayout.setHorizontalGroup(
            jpSaleHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSaleHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpSaleHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlNumVenta)
                    .addComponent(jlCodCliente)
                    .addComponent(jlFechaVenta))
                .addGap(18, 18, 18)
                .addGroup(jpSaleHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfCodCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(jtfFechaVenta, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jtfNumVenta))
                .addGroup(jpSaleHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpSaleHeaderLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jlNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpSaleHeaderLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbCal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jpSaleHeaderLayout.setVerticalGroup(
            jpSaleHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSaleHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpSaleHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlNumVenta)
                    .addComponent(jtfNumVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpSaleHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlCodCliente)
                    .addComponent(jtfCodCliente)
                    .addComponent(jlNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpSaleHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpSaleHeaderLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jpSaleHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbCal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jpSaleHeaderLayout.createSequentialGroup()
                                .addComponent(jlFechaVenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(1, 1, 1))))
                    .addComponent(jtfFechaVenta))
                .addContainerGap())
        );

        jpTotals.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Totales", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jlServQtyT.setLabelFor(jlServQtyV);
        jlServQtyT.setText("Ctd.Servicios:");
        jlServQtyT.setToolTipText("");

        jlServQtyV.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlServQtyV.setText("jLabel2");

        jlServSubtT.setLabelFor(jlServSubtV);
        jlServSubtT.setText("Subt.Servicios:");
        jlServSubtT.setToolTipText("");

        jlServSubtV.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlServSubtV.setText("jLabel4");

        jlArtQtyT.setLabelFor(jlArtQtyV);
        jlArtQtyT.setText("Ctd.Artículos:");
        jlArtQtyT.setToolTipText("");

        jlArtQtyV.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlArtQtyV.setText("jLabel6");

        jlArtSubtT.setLabelFor(jlArtSubtV);
        jlArtSubtT.setText("Subt.Artículos:");
        jlArtSubtT.setToolTipText("");

        jlArtSubtV.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlArtSubtV.setText("jLabel8");

        jlTotT.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlTotT.setLabelFor(jlTotQtyV);
        jlTotT.setText("TOTALES:");
        jlTotT.setToolTipText("");

        jlTotQtyV.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlTotQtyV.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlTotQtyV.setText("jLabel10");

        jlTotAmtV.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlTotAmtV.setForeground(new java.awt.Color(0, 0, 204));
        jlTotAmtV.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlTotAmtV.setText("jLabel12");

        jlEUR.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jlEUR.setForeground(new java.awt.Color(0, 0, 204));
        jlEUR.setText("€");
        jlEUR.setToolTipText("");

        javax.swing.GroupLayout jpTotalsLayout = new javax.swing.GroupLayout(jpTotals);
        jpTotals.setLayout(jpTotalsLayout);
        jpTotalsLayout.setHorizontalGroup(
            jpTotalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTotalsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpTotalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlTotT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlArtQtyT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlServQtyT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jpTotalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpTotalsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jlTotQtyV))
                    .addGroup(jpTotalsLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jpTotalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlServQtyV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlArtQtyV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(jpTotalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpTotalsLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jpTotalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlServSubtT, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addGroup(jpTotalsLayout.createSequentialGroup()
                                .addComponent(jlArtSubtT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(1, 1, 1)))
                        .addGap(36, 36, 36)
                        .addGroup(jpTotalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlServSubtV, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                            .addComponent(jlArtSubtV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jpTotalsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jlTotAmtV)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlEUR)
                .addContainerGap())
        );
        jpTotalsLayout.setVerticalGroup(
            jpTotalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTotalsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpTotalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlServQtyT)
                    .addComponent(jlServQtyV)
                    .addComponent(jlServSubtT)
                    .addComponent(jlServSubtV))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpTotalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlArtQtyT)
                    .addComponent(jlArtQtyV)
                    .addComponent(jlArtSubtT)
                    .addComponent(jlArtSubtV))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpTotalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTotT)
                    .addComponent(jlTotQtyV)
                    .addComponent(jlTotAmtV)
                    .addComponent(jlEUR))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpFunctions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpSaleLines, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jpSaleHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpObs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jpTotals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpSaleHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpObs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpSaleLines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpTotals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Evento que se dispara cuando se acciona el
     * pulsador de grabación de la venta */
    private void jbGyCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGyCActionPerformed

        int i, j, rows;
        Boolean isSaleHInfoOk, isSaleLInfoOk;
        DbConnection dbc;
        Connection conDb;
        SaleHeader sh;
        SaleLines sl;
        ArrayList<SaleHeader> dataSaleH;
        ArrayList<SaleLines> dataSaleL;

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
            conDb.setAutoCommit(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar la info.de la venta
        isSaleHInfoOk = verifySaleHInfo(conDb);
        isSaleLInfoOk = verifySaleLInfo(conDb);
        if (isSaleHInfoOk == false || isSaleLInfoOk == false) {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
            this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
            return;
        }
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        try {
            // Grabar la info.de la cab.de la venta            
            sh = new SaleHeader(
                    Integer.parseInt(jtfNumVenta.getText()),
                    Integer.parseInt(jtfCodCliente.getText()),
                    null,
                    jtfFechaVenta.getText(),
                    jtaObs.getText());
            sh.saveSaleHData(conDb, this.isNewSale);
            this.isNewSale = false;

            // Grabar la info.de las líneas de la venta   
            rows = jtSaleLines.getRowCount();
            dataSaleL = new ArrayList<SaleLines>();
            for (i = 0; i < rows; i++) {
                j = 0;
                dataSaleL.add(new SaleLines(
                        Integer.parseInt(jtfNumVenta.getText()),
                        (Integer) jtSaleLines.getValueAt(i, j++),
                        (Boolean) jtSaleLines.getValueAt(i, j++),
                        (Integer) jtSaleLines.getValueAt(i, j++),
                        (String) jtSaleLines.getValueAt(i, j++),
                        (Integer) jtSaleLines.getValueAt(i, j++),
                        (Double) jtSaleLines.getValueAt(i, j++),
                        (Double) jtSaleLines.getValueAt(i, j++)));
            }
            sl = new SaleLines(Integer.parseInt(jtfNumVenta.getText()));
            sl.saveSaleLData(conDb, isNewSale, dataSaleL);

            // Confirmar la actualización en la BBDD
            conDb.commit();

            // Devolver la info.de la cab.de la venta actualizada
            // al JDialog de la lista de ventas    
            this.dataSaleH_ret.add(new SaleHeader(
                    Integer.parseInt(jtfNumVenta.getText()),
                    Integer.parseInt(jtfCodCliente.getText()),
                    jlNombre.getText(),
                    jtfFechaVenta.getText(),
                    null));

// 29.03.2017 ini <<<               
//          // Mensaje grabación info.  
//          if (this.WindowClosing.equals(false)) {
//              JOptionPane.showMessageDialog(null,
//                      "Info.grabada",
//                      null,
//                      JOptionPane.INFORMATION_MESSAGE);
//          }
// 29.03.2017 fin >>>
        } catch (SQLException e) {
            // Falló la actualización en la BBDD
            try {
                conDb.rollback();
            } catch (SQLException e2) {
            }
            JOptionPane.showMessageDialog(null,
                    "No fue posible actualizar la info.del registro"
                    + " " + "de servicios/venta",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }

// 29.03.2017 ini <<<
        // Cerrar el JDialog        
        this.dispose();
// 29.03.2017 fin >>>        
    }//GEN-LAST:event_jbGyCActionPerformed

    /* Evento que se dispara cuando se acciona el
     * pulsador de modificación de la venta */
    private void jbModifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModifActionPerformed

        // Activar o hacer visibles los objetos del JDialog
        enableOrVisibleObjs();
    }//GEN-LAST:event_jbModifActionPerformed

    /* Evento que se dispara cuando se acciona el
     * pulsador de nueva línea de la venta */
    private void jbNewSaleLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNewSaleLActionPerformed

        // Definiciones locales
        int j, lr, nln;
        Boolean isSaleLInfoOk;
        DbConnection dbc;
        Connection conDb;
        DefaultTableModel dtm;
        Object[][] data;

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar info.de las línea de venta
        isSaleLInfoOk = verifySaleLInfo(conDb);

        // Cerrar la conexión a la BBDD        
        try {
            conDb.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible cerrar la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        }

        // Existen errores en las líneas de compra?
        if (isSaleLInfoOk == false) {
            return;
        }

        // Agregar una nueva línea al JTable
        dtm = (DefaultTableModel) jtSaleLines.getModel();
        if (jtSaleLines.getRowCount() > 0) {
            lr = jtSaleLines.getRowCount() - 1;
            nln = (Integer) jtSaleLines.getValueAt(lr, 0) + 1;
        } else {
            nln = 1;
        }
        data = new Object[1][jtSaleLines.getColumnCount()];
        j = 0;
        data[0][j++] = nln;
        data[0][j++] = false;
        dtm.addRow(data[0]);

        // Situar el cursor en el código art./serv.de la línea agregada
        lr = jtSaleLines.getRowCount() - 1;
        jtSaleLines.requestFocus();
        jtSaleLines.changeSelection(lr, 2, false, false);
    }//GEN-LAST:event_jbNewSaleLActionPerformed

    /* Evento que se dispara cuando se acciona F1
     * sobre el código de art./serv.del JTable */
    private void jtSaleLinesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtSaleLinesKeyPressed

        // Definiciones locales
        int j, row;
        DbConnection dbc;
        Connection conDb;
        ArtList al;
        ServList sl;

        // Se accionó F1 sobre el código de art./servicio y
        // el JTable está activo?
        if (evt.getKeyCode() == KeyEvent.VK_F1
                && jtSaleLines.isEnabled() == true
                && jtSaleLines.getSelectedColumn() == 2) {

            // Abrir la conexión a la BBDD  
            try {
                dbc = new DbConnection();
                conDb = dbc.getConBd();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible abrir la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Seleccionar el artículo o servicio y actualizar
            // su código y descripción en el JTable
            row = jtSaleLines.getSelectedRow();
            j = 2;
            if ((Boolean) jtSaleLines.getValueAt(row, 1) == true) {
                al = new ArtList((Frame) this.getParent(), true, true);
                al.setVisible(true);
                if (al.getCodArticulo_sel() > 0) {
                    jtSaleLines.setValueAt(al.getCodArticulo_sel(), row, j++);
                    jtSaleLines.setValueAt(al.getDescripcion_sel(), row, j++);
                    jtSaleLines.setValueAt(1, row, j++);
                    jtSaleLines.setValueAt(al.getPrecioVentaII_sel(), row, j++);

                    // Actualizar totales
                    verifySaleLInfo(conDb);
                }
            } else {
                sl = new ServList((Frame) this.getParent(), true, true);
                sl.setVisible(true);
                if (sl.getCodServicio_sel() > 0) {
                    jtSaleLines.setValueAt(sl.getCodServicio_sel(), row, j++);
                    jtSaleLines.setValueAt(sl.getDescripcion_sel(), row, j++);
                    jtSaleLines.setValueAt(1, row, j++);
                    jtSaleLines.setValueAt(sl.getPrecioVentaII_sel(), row, j++);

                    // Actualizar totales
                    verifySaleLInfo(conDb);
                }
            }

            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jtSaleLinesKeyPressed

    /* Evento que se dispara previo al
     * cierre del JDialog */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        // Definiciones locales
        int answer;

        // Popup grabación info.de la venta si se está en modo modificación
        if (jbGyC.isVisible() == true) {
            answer = JOptionPane.showConfirmDialog(null,
                    "¿Desea guardar los cambios?",
                    null,
                    JOptionPane.YES_NO_OPTION);
            if (answer == 0) {
                this.WindowClosing = true;
                jbGyC.doClick();
                if (this.getDefaultCloseOperation() == WindowConstants.DO_NOTHING_ON_CLOSE) {
                    this.WindowClosing = false;
                    return;
                }
            }
        }
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_formWindowClosing

    /* Evento que se dispara cuando se acciona F1
     * sobre el código de cliente */
    private void jtfCodClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfCodClienteKeyPressed

        // Definiciones locales
        CustList cl;

        // Seleccionar el cliente y actualizar su código y nombre  
        // en los objetos correspondientes del JDialog
        if (evt.getKeyCode() == KeyEvent.VK_F1
                && jtfCodCliente.isEditable() == true) {
            cl = new CustList((Frame) this.getParent(), true, true);
            cl.setVisible(true);
            if (cl.getCodCliente_sel() > 0) {
                jtfCodCliente.setText(String.valueOf(cl.getCodCliente_sel()));
                jlNombre.setText(cl.getNombre_sel());
            }
        }
    }//GEN-LAST:event_jtfCodClienteKeyPressed

    /* Evento que se dispara cuando se acciona el pulsador
     * de eliminación de una línea de la venta */
    private void jbRemSaleLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemSaleLActionPerformed

        // Definiciones locales
        int answer, row;
        DbConnection dbc;
        Connection conDb;
        DefaultTableModel dtm;

        // Eliminar la línea seleccionada del JTable
        row = jtSaleLines.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null,
                    "Es necesario seleccionar un registro de servicios/venta",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Popup de confirmación
        answer = JOptionPane.showConfirmDialog(null,
                "¿Realmente desea eliminar la línea seleccionada?",
                null,
                JOptionPane.YES_NO_OPTION);
        if (answer != 0) {
            return;
        }

        // Eliminar la línea seleccionada del JTable 
        dtm = (DefaultTableModel) jtSaleLines.getModel();
        dtm.removeRow(row);

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Actualizar totales
        verifySaleLInfo(conDb);

        // Cerrar la conexión a la BBDD        
        try {
            conDb.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible cerrar la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbRemSaleLActionPerformed

    /* Evento que se dispara cuando se acciona el pulsador
     * de verificación de la info.de la venta */
    private void jbVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVerifyActionPerformed

        // Definiciones locales
        DbConnection dbc;
        Connection conDb;

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar la info.de la venta
        verifySaleHInfo(conDb);
        verifySaleLInfo(conDb);

        // Cerrar la conexión a la BBDD        
        try {
            conDb.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible cerrar la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbVerifyActionPerformed

    /* Evento que se dispara cuando se selecciona una fecha 
     * del calendario situado al lado de la fecha de venta */
    private void jbCalPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jbCalPropertyChange

        // Definiciones locales
        SimpleDateFormat sdt;

        // Mover la fecha seleccionada del calendario al campo fecha venta
        if (evt.getNewValue() instanceof Date) {
            sdt = new SimpleDateFormat("dd-MM-yyyy");
            jtfFechaVenta.setText(sdt.format(evt.getNewValue()));
        }
    }//GEN-LAST:event_jbCalPropertyChange

    /* Evento que se dispara cuando se acciona el pulsador
     * de venta previa */
    private void jbPrevSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrevSaleActionPerformed

        // Definiciones locales
        int row;

        // Se accionó el pulsador de venta anterior   
        row = jtSalesList.getSelectedRow();
        if (row > 0) {
            row--;
            this.numVenta = (Integer) jtSalesList.getValueAt(row, 0);
            jtSalesList.getSelectionModel().setSelectionInterval(row, row);
            loadSale();
        }
    }//GEN-LAST:event_jbPrevSaleActionPerformed

    /* Evento que se dispara cuando se acciona el pulsador
     * de venta siguiente */
    private void jbNextSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNextSaleActionPerformed

        // Definiciones locales
        int row;

        // Se accionó el pulsador de venta siguiente        
        row = jtSalesList.getSelectedRow();
        if (row < jtSalesList.getRowCount() - 1) {
            row++;
            this.numVenta = (Integer) jtSalesList.getValueAt(row, 0);
            jtSalesList.getSelectionModel().setSelectionInterval(row, row);
            loadSale();
        }
    }//GEN-LAST:event_jbNextSaleActionPerformed

    /* Nuevo cliente */
    private void newSale() {

        // Definiciones locales 
        DbConnection dbc;
        Connection conDb;
        Object[][] data;
        String[] columns;
        SaleHeader sh;
        SaleLines sl;
        SimpleDateFormat sdt;

        // Activar o hacer visibles los objetos del JDialog
        enableOrVisibleObjs();

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Cargar la info.de la cab.de la venta en los objetos del JDialog
            sh = new SaleHeader();
            this.numVenta = sh.getNewSaleNum(conDb);
            this.jtfNumVenta.setText(String.valueOf(this.numVenta));
            this.jtfCodCliente.setText(null);
            this.jlNombre.setText(null);
            sdt = new SimpleDateFormat("dd-MM-yyyy");
            this.jtfFechaVenta.setText(sdt.format(new Date()));
            this.jtaObs.setText(null);

            // Cargar la info.de las líneas de la venta en el JTable
            sl = new SaleLines(this.numVenta);
            columns = sl.getAllColumns();
            data = null;
            loadSaleLinesInjTable(jtSaleLines, data, columns);

            // Inicializar totales
            verifySaleLInfo(conDb);
        } catch (SQLException e) {
            // Mensaje de error
            JOptionPane.showMessageDialog(null,
                    "No fue posible determinar un número para el nuevo"
                    + " " + "registro de servicios/venta",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /* Cargar la info.de la cab. de la venta en los objetos del JDialog */
    private void loadSale() {

        // Definiciones locales
        int i, j;
        DbConnection dbc;
        Connection conDb;
        ArrayList<SaleLines> dataSaleL;
        ArrayList<SaleHeader> dataSaleH;
        Object[][] data;
        String[] columns;
        SaleHeader sh;
        SaleLines sl;

        // Hacer invisible el pulsador de grabación
        jbGyC.setVisible(false);
        jbVerify.setVisible(false);
        jbNewSaleL.setVisible(false);
        jbRemSaleL.setVisible(false);
        jbCal.setVisible(false);

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Cargar la info.de la cab. de la venta en los objetos del JDialog
            sh = new SaleHeader(this.numVenta);
            dataSaleH = sh.getSaleHData(conDb);
            if (dataSaleH.size() > 0) {
                this.jtfNumVenta.setText(String.valueOf(dataSaleH.get(0)
                        .getNumVenta()));
                this.jtfCodCliente.setText(String.valueOf(dataSaleH.get(0)
                        .getCodCliente()));
                this.jlNombre.setText(dataSaleH.get(0)
                        .getNombre());
                this.jtfFechaVenta.setText(dataSaleH.get(0)
                        .getFechaVenta());
                this.jtaObs.setText(String.valueOf(dataSaleH.get(0)
                        .getObs()));
            }

            // Cargar la info.de las líneas de la venta en el jTable
            sl = new SaleLines(this.numVenta);
            columns = sl.getAllColumns();
            dataSaleL = sl.getSaleLData(conDb);
            data = new Object[dataSaleL.size()][columns.length];
            for (i = 0; i < dataSaleL.size(); i++) {
                j = 0;
                data[i][j++] = dataSaleL.get(i).getNumLinea();
                data[i][j++] = dataSaleL.get(i).isEsArt();
                data[i][j++] = dataSaleL.get(i).getCodArtOServ();
                data[i][j++] = dataSaleL.get(i).getDescripcion();
                data[i][j++] = dataSaleL.get(i).getCantUds();
                data[i][j++] = dataSaleL.get(i).getPrecioUdII();
                data[i][j++] = dataSaleL.get(i).getImpLinea();
            }
            loadSaleLinesInjTable(jtSaleLines, data, columns);

            // Ajustar automáticamente la anchura de las columnas
            jtSaleLines.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
            resizeColWidthjTable(jtSaleLines);

            // Inicializar totales
            verifySaleLInfo(conDb);
        } catch (SQLException e) {
            // Mensaje de error
            JOptionPane.showMessageDialog(null,
                    "No fue posible cargar la info.del registro"
                    + " " + "de servicios/venta",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /* Cargar la info.de las líneas de la venta en el JTable */
    private void loadSaleLinesInjTable(JTable table, Object[][] data,
            String[] columns) {

        // Cargar la info.de las líneas de la venta en el JTable
        table.setModel(new javax.swing.table.DefaultTableModel(
                data,
                columns) {
                    Class[] types = new Class[]{
                        java.lang.Integer.class,
                        java.lang.Boolean.class,
                        java.lang.Integer.class,
                        java.lang.String.class,
                        java.lang.Integer.class,
                        java.lang.Double.class,
                        java.lang.Double.class};
                    boolean[] canEdit = new boolean[]{
                        false,
                        true,
                        true,
                        false,
                        true,
                        true,
                        false};

                    @Override
                    public Class getColumnClass(int columnIndex) {
                        return types[columnIndex];
                    }

                    @Override
                    public boolean isCellEditable(int rowIndex,
                            int columnIndex) {
                        return canEdit[columnIndex];
                    }
                }
        );

        // Ajustar automáticamente la anchura de las columnas
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        resizeColWidthjTable(table);
    }

    /* Ajustar la anchura de las columnas del JTable */
    private void resizeColWidthjTable(JTable table) {

        // Definiciones locales
        int column, row;
        int width, prefWidth, maxWidth;
        TableColumn tc;
        TableCellRenderer tcr;
        Component c;

        // Ajustar la anchura de las columnas del jTable
        for (column = 0; column < table.getColumnCount(); column++) {
            tc = table.getColumnModel().getColumn(column);
            prefWidth = tc.getMinWidth();
            maxWidth = tc.getMaxWidth();
            for (row = 0; row < table.getRowCount(); row++) {
                tcr = table.getCellRenderer(row, column);
                c = table.prepareRenderer(tcr, row, column);
                width = c.getPreferredSize().width
                        + table.getIntercellSpacing().width;
                prefWidth = Math.max(prefWidth, width);
                if (prefWidth >= maxWidth) {
                    prefWidth = maxWidth;
                    break;
                }
            }
            tc.setPreferredWidth(prefWidth);
        }
    }

    /* Verificar la info.de la cab.de la venta */
    private Boolean verifySaleHInfo(Connection conDb) {

        // Definiciones locales
        int cc;
        String msgTxt;
        Boolean isSaleHInfoOk;
        Customer cust;
        ArrayList<Customer> dataCust;
        SimpleDateFormat sdt;

        // Init.valores
        msgTxt = null;
        isSaleHInfoOk = true;

        // Verificar el código de cliente
        if (jtfCodCliente.getText().trim().isEmpty()) {
            jtfCodCliente.requestFocus();
            msgTxt = "Informar el código del cliente";
            isSaleHInfoOk = false;
        } else {
            try {
                cc = Integer.parseInt(jtfCodCliente.getText());
            } catch (NumberFormatException e) {
                cc = 0;
                jtfCodCliente.requestFocus();
                msgTxt = "El código de cliente debe ser numérico";
                isSaleHInfoOk = false;
            }
            if (isSaleHInfoOk == true) {
                cust = new Customer(cc);
                try {
                    dataCust = cust.getCustData(conDb);
                    if (dataCust.isEmpty()) {
                        jtfCodCliente.requestFocus();
                        msgTxt = "El código de cliente no existe";
                        isSaleHInfoOk = false;
                    } else {
                        jlNombre.setText(dataCust.get(0).getNombre());
                    }
                } catch (SQLException e) {
                    jtfCodCliente.requestFocus();
                    msgTxt = "No se pudo verificar el código de cliente";
                    isSaleHInfoOk = false;
                }
            }
        }

        // Verificar la fecha de venta
        if (isSaleHInfoOk == true) {
            if (jtfFechaVenta.getText().trim().isEmpty()) {
                jtfFechaVenta.requestFocus();
                msgTxt = "Informar la fecha doc.";
                isSaleHInfoOk = false;
            } else {
                try {
                    sdt = new SimpleDateFormat("dd-MM-yyyy");
                    sdt.setLenient(false);
                    sdt.parse(jtfFechaVenta.getText());
                } catch (ParseException e) {
                    jtfFechaVenta.requestFocus();
                    msgTxt = "El formato de la fecha doc. es erróneo"
                            + " " + "(ej.fecha correcta: 31-12-2016)";
                    isSaleHInfoOk = false;
                }
            }
        }

        // Mostrar error si es que lo hay
        if (isSaleHInfoOk == false) {
            JOptionPane.showMessageDialog(null,
                    msgTxt,
                    null,
                    JOptionPane.ERROR_MESSAGE);
        }

        // Devolver flag verificación
        return isSaleHInfoOk;
    }

    /* Verificar la info.de la venta */
    private Boolean verifySaleLInfo(Connection conDb) {

        // Definiciones locales
        int i, j, ac, sc, lq, sq, aq, tq;
        Double lp, la, sa, aa, ta;
        Boolean isSaleLInfoOk, ia;
        String msgTxt;
        Article art;
        Service serv;
        ArrayList<Article> dataArt;
        ArrayList<Service> dataServ;

        // Cancelar la edición del JTable si está activa
        if (jtSaleLines.getCellEditor() != null) {
            jtSaleLines.getCellEditor().stopCellEditing();
        }

        // Verificar la info.de todas las líneas de venta
        msgTxt = null;
        isSaleLInfoOk = true;
        sq = 0;
        aq = 0;
        tq = 0;
        sa = 0.0;
        aa = 0.0;
        ta = 0.0;
        for (i = 0; i < jtSaleLines.getRowCount(); i++) {

            // Init.valores            
            lq = 0;
            lp = 0.0;
            la = 0.0;

            // Verificar el código de artículo/servicio
            j = 1;
            ia = (Boolean) jtSaleLines.getValueAt(i, j);
            j = 2;
            if (ia == true) {
                if (jtSaleLines.getValueAt(i, j) == null) {
                    jtSaleLines.requestFocus();
                    jtSaleLines.changeSelection(i, j, false, false);
                    msgTxt = "Informar el código de artículo";
                    isSaleLInfoOk = false;
                } else {
                    try {
                        ac = (Integer) jtSaleLines.getValueAt(i, j);
                    } catch (NumberFormatException e) {
                        ac = 0;
                        jtSaleLines.requestFocus();
                        jtSaleLines.changeSelection(i, j, false, false);
                        msgTxt = "El código de artículo debe ser numérico";
                        isSaleLInfoOk = false;
                    }
                    if (isSaleLInfoOk == true) {
                        try {
                            art = new Article(ac);
                            dataArt = art.getArtData(conDb);
                            if (dataArt.isEmpty()) {
                                jtSaleLines.requestFocus();
                                jtSaleLines.changeSelection(i, j, false, false);
                                msgTxt = "El código de artículo no existe";
                                isSaleLInfoOk = false;
                            } else {
                                j = 3;
                                jtSaleLines.setValueAt(dataArt.get(0).getDescripcion(), i, j);
                            }
                        } catch (SQLException e) {
                            jtSaleLines.requestFocus();
                            jtSaleLines.changeSelection(i, j, false, false);
                            msgTxt = "No fue posible verificar el"
                                    + " " + "código de artículo";
                            isSaleLInfoOk = false;
                        }
                    }
                }
            } else {
                if (jtSaleLines.getValueAt(i, j) == null) {
                    jtSaleLines.requestFocus();
                    jtSaleLines.changeSelection(i, j, false, false);
                    msgTxt = "Informar el código de servicio";
                    isSaleLInfoOk = false;
                } else {
                    try {
                        sc = (Integer) jtSaleLines.getValueAt(i, j);
                    } catch (NumberFormatException e) {
                        sc = 0;
                        jtSaleLines.requestFocus();
                        jtSaleLines.changeSelection(i, j, false, false);
                        msgTxt = "El código de servicio debe ser numérico";
                        isSaleLInfoOk = false;
                    }
                    if (isSaleLInfoOk == true) {
                        try {
                            serv = new Service(sc);
                            dataServ = serv.getServData(conDb);
                            if (dataServ.isEmpty()) {
                                jtSaleLines.requestFocus();
                                jtSaleLines.changeSelection(i, j, false, false);
                                msgTxt = "El código de servicio no existe";
                                isSaleLInfoOk = false;
                            } else {
                                j = 3;
                                jtSaleLines.setValueAt(dataServ.get(0).getDescripcion(), i, j);
                            }
                        } catch (SQLException e) {
                            jtSaleLines.requestFocus();
                            jtSaleLines.changeSelection(i, j, false, false);
                            msgTxt = "No fue posible verificar el"
                                    + " " + "código de servicio";
                            isSaleLInfoOk = false;
                        }
                    }
                }
            }

            // Verificar la cantidad
            if (isSaleLInfoOk == true) {
                j = 4;
                if (jtSaleLines.getValueAt(i, j) == null) {
                    jtSaleLines.requestFocus();
                    jtSaleLines.changeSelection(i, j, false, false);
                    msgTxt = "Informar la cantidad";
                    isSaleLInfoOk = false;
                } else {
                    try {
                        lq = (Integer) jtSaleLines.getValueAt(i, j);
                        if (lq == 0) {
                            jtSaleLines.requestFocus();
                            jtSaleLines.changeSelection(i, j, false, false);
                            msgTxt = "Informar la cantidad";
                            isSaleLInfoOk = false;
                        } else if (lq < 0) {
                            jtSaleLines.requestFocus();
                            jtSaleLines.changeSelection(i, j, false, false);
                            msgTxt = "La cantidad debe ser positiva";
                            isSaleLInfoOk = false;
                        }
                    } catch (NumberFormatException e) {
                        jtSaleLines.requestFocus();
                        jtSaleLines.changeSelection(i, j, false, false);
                        msgTxt = "La cantidad debe ser numérica y/o"
                                + " " + "sin decimales";
                        isSaleLInfoOk = false;
                    }
                }
            }

            // Verificar el precio
            if (isSaleLInfoOk == true) {
                j = 5;
                if (jtSaleLines.getValueAt(i, j) == null) {
                    jtSaleLines.requestFocus();
                    jtSaleLines.changeSelection(i, j, false, false);
                    msgTxt = "Informar el precio";
                    isSaleLInfoOk = false;
                } else {
                    try {
                        lp = (Double) jtSaleLines.getValueAt(i, j);
// 29.03.2017 ini <<< 
//                    
//                      if (lp == 0) {
//                          jtSaleLines.requestFocus();
//                          jtSaleLines.changeSelection(i, j, false, false);
//                          msgTxt = "Informar el precio";
//                          isSaleLInfoOk = false;
// 29.03.2017 fin >>>
                        if (lp < 0) {
                            jtSaleLines.requestFocus();
                            jtSaleLines.changeSelection(i, j, false, false);
                            msgTxt = "El precio debe ser positivo";
                            isSaleLInfoOk = false;
                        }
                    } catch (NumberFormatException e) {
                        jtSaleLines.requestFocus();
                        jtSaleLines.changeSelection(i, j, false, false);
                        msgTxt = "El precio debe ser numérico";
                        isSaleLInfoOk = false;
                    }
                }
            }

            // Actualizar el importe de la línea
            if (isSaleLInfoOk == true) {
                j = 6;
                la = lq * lp;
                jtSaleLines.setValueAt(la, i, j);
            }

            // Acumular en totales
            if (isSaleLInfoOk == true) {
                if (ia == false) {
                    sq = sq + lq;
                    sa = sa + la;
                } else {
                    aq = aq + lq;
                    aa = aa + la;
                }
                tq = sq + aq;
                ta = sa + aa;
            }
        }

        // Actualizar totales
        jlServQtyV.setText(String.valueOf(sq));
        jlArtQtyV.setText(String.valueOf(aq));
        jlTotQtyV.setText(String.valueOf(tq));
        sa = new BigDecimal(sa).setScale(2, BigDecimal.ROUND_HALF_EVEN).doubleValue();
        jlServSubtV.setText(String.valueOf(sa));
        aa = new BigDecimal(aa).setScale(2, BigDecimal.ROUND_HALF_EVEN).doubleValue();
        jlArtSubtV.setText(String.valueOf(aa));
        ta = new BigDecimal(ta).setScale(2, BigDecimal.ROUND_HALF_EVEN).doubleValue();
        jlTotAmtV.setText(String.valueOf(ta));

        // Mostrar el error si es que lo hay
        if (isSaleLInfoOk
                == false) {
            JOptionPane.showMessageDialog(null,
                    msgTxt,
                    null,
                    JOptionPane.ERROR_MESSAGE);
        }

        // Devolver flag verificación
        return isSaleLInfoOk;
    }

    /* Activar o hacer visibles los objetos del JDialog */
    private void enableOrVisibleObjs() {

        // Activar o hacer visibles los objetos del JDialog
        jtfCodCliente.setEditable(true);
        jtfFechaVenta.setEditable(true);
        jtaObs.setEditable(true);
        jtSaleLines.setEnabled(true);
        jbGyC.setVisible(true);
        jbModif.setVisible(false);
        jbPrevSale.setVisible(false);
        jbNextSale.setVisible(false);
        jbVerify.setVisible(true);
        jbNewSaleL.setVisible(true);
        jbRemSaleL.setVisible(true);
        jbCal.setVisible(true);
    }

    /* */
    public ArrayList<SaleHeader> getSaleData() {
        return dataSaleH_ret;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaleMaint.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaleMaint.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaleMaint.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaleMaint.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                SaleMaint dialog = new SaleMaint(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private net.sourceforge.jcalendarbutton.JCalendarButton jbCal;
    private javax.swing.JButton jbGyC;
    private javax.swing.JButton jbModif;
    private javax.swing.JButton jbNewSaleL;
    private javax.swing.JButton jbNextSale;
    private javax.swing.JButton jbPrevSale;
    private javax.swing.JButton jbRemSaleL;
    private javax.swing.JButton jbVerify;
    private javax.swing.JLabel jlArtQtyT;
    private javax.swing.JLabel jlArtQtyV;
    private javax.swing.JLabel jlArtSubtT;
    private javax.swing.JLabel jlArtSubtV;
    private javax.swing.JLabel jlCodCliente;
    private javax.swing.JLabel jlEUR;
    private javax.swing.JLabel jlFechaVenta;
    private javax.swing.JLabel jlNombre;
    private javax.swing.JLabel jlNumVenta;
    private javax.swing.JLabel jlServQtyT;
    private javax.swing.JLabel jlServQtyV;
    private javax.swing.JLabel jlServSubtT;
    private javax.swing.JLabel jlServSubtV;
    private javax.swing.JLabel jlTotAmtV;
    private javax.swing.JLabel jlTotQtyV;
    private javax.swing.JLabel jlTotT;
    private javax.swing.JPanel jpFunctions;
    private javax.swing.JPanel jpObs;
    private javax.swing.JPanel jpSaleHeader;
    private javax.swing.JPanel jpSaleLines;
    private javax.swing.JPanel jpTotals;
    private javax.swing.JScrollPane jspObs;
    private javax.swing.JScrollPane jspSaleLines;
    private javax.swing.JTable jtSaleLines;
    private javax.swing.JTextArea jtaObs;
    private javax.swing.JTextField jtfCodCliente;
    private javax.swing.JTextField jtfFechaVenta;
    private javax.swing.JTextField jtfNumVenta;
    // End of variables declaration//GEN-END:variables
}
