/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Sales;

import Miscellaneous.DbConnection;
import java.awt.Component;
import java.awt.Frame;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author egimenez
 */
public class SalesList extends javax.swing.JDialog {

    /**
     * Creates new form SaleHeader_jd
     *
     * @param parent
     * @param modal
     */
    public SalesList(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadSalesH();
        //this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpSalestList = new javax.swing.JPanel();
        jspSalesList = new javax.swing.JScrollPane();
        jtSalesList = new javax.swing.JTable();
        jpSalesSearch = new javax.swing.JPanel();
        jtfSalesSearch = new javax.swing.JTextField();
        jlSalesSearch = new javax.swing.JLabel();
        jpFunctions = new javax.swing.JPanel();
        jbNewSale = new javax.swing.JButton();
        jbElimSale = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jpSalestList.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Relaci√≥n Registros Servicios/Venta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jtSalesList.setAutoCreateRowSorter(true);
        jtSalesList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jtSalesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtSalesListMouseClicked(evt);
            }
        });
        jspSalesList.setViewportView(jtSalesList);

        javax.swing.GroupLayout jpSalestListLayout = new javax.swing.GroupLayout(jpSalestList);
        jpSalestList.setLayout(jpSalestListLayout);
        jpSalestListLayout.setHorizontalGroup(
            jpSalestListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jpSalestListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jspSalesList, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE))
        );
        jpSalestListLayout.setVerticalGroup(
            jpSalestListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 356, Short.MAX_VALUE)
            .addGroup(jpSalestListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jspSalesList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE))
        );

        jtfSalesSearch.setToolTipText("");
        jtfSalesSearch.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jtfSalesSearchCaretUpdate(evt);
            }
        });

        jlSalesSearch.setText("Filtro");

        javax.swing.GroupLayout jpSalesSearchLayout = new javax.swing.GroupLayout(jpSalesSearch);
        jpSalesSearch.setLayout(jpSalesSearchLayout);
        jpSalesSearchLayout.setHorizontalGroup(
            jpSalesSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSalesSearchLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jlSalesSearch)
                .addGap(18, 18, 18)
                .addComponent(jtfSalesSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(424, Short.MAX_VALUE))
        );
        jpSalesSearchLayout.setVerticalGroup(
            jpSalesSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpSalesSearchLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpSalesSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfSalesSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlSalesSearch))
                .addContainerGap())
        );

        jpFunctions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true));

        jbNewSale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/plus-icon.png"))); // NOI18N
        jbNewSale.setToolTipText("Crear un nuevo registro de servicios/venta");
        jbNewSale.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbNewSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNewSaleActionPerformed(evt);
            }
        });

        jbElimSale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/minus-icon.png"))); // NOI18N
        jbElimSale.setToolTipText("Eliminar un registro de servicios/venta");
        jbElimSale.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbElimSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbElimSaleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpFunctionsLayout = new javax.swing.GroupLayout(jpFunctions);
        jpFunctions.setLayout(jpFunctionsLayout);
        jpFunctionsLayout.setHorizontalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFunctionsLayout.createSequentialGroup()
                .addComponent(jbNewSale, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbElimSale, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jpFunctionsLayout.setVerticalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jbNewSale, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
            .addComponent(jbElimSale, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jpSalestList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpSalesSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpFunctions, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpSalesSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpSalestList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Evento que se dispara cuando se realiza 
     * un doble Click en una fila del JTable */
    private void jtSalesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtSalesListMouseClicked

        // Definiciones locales
        int col, sn, row;
        SaleMaint sm;
        ArrayList<SaleHeader> dataSaleH_ret;

        // Con doble click se accede a la venta y luego
        // se actualiza la info.de la venta en el JTable
        if (evt.getClickCount() == 2) {
            row = jtSalesList.getSelectedRow();
            sn = (Integer) jtSalesList.getValueAt(row, 0);
            sm = new SaleMaint((Frame)this.getParent(), true, jtSalesList, sn, false);
            sm.setTitle("Visualizar/Actualizar Registro Servicios/Venta");
            sm.pack();
            sm.setVisible(true);
            dataSaleH_ret = sm.getSaleData();
            if (dataSaleH_ret.size() > 0) {
                row = jtSalesList.getSelectedRow();
                col = 0;
                jtSalesList.setValueAt(dataSaleH_ret.get(0).getNumVenta(), row, col++);
                jtSalesList.setValueAt(dataSaleH_ret.get(0).getCodCliente(), row, col++);
                jtSalesList.setValueAt(dataSaleH_ret.get(0).getNombre(), row, col++);
                jtSalesList.setValueAt(dataSaleH_ret.get(0).getFechaVenta(), row, col++);
            }
        }
    }//GEN-LAST:event_jtSalesListMouseClicked

    /* Evento que se dispara cuando se realiza 
     * un cambio en el campo de b√∫squeda */
    private void jtfSalesSearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jtfSalesSearchCaretUpdate

        // Definiciones locales
        TableRowSorter<TableModel> trs;

        // Filtrar cabs.de los registros de venta s/campo de b√∫squeda
        trs = new TableRowSorter<TableModel>(((DefaultTableModel) jtSalesList.getModel()));
        trs.setRowFilter(RowFilter.regexFilter(jtfSalesSearch.getText()));
        jtSalesList.setRowSorter(trs);
    }//GEN-LAST:event_jtfSalesSearchCaretUpdate

    /* Evento que se dispara cuando se acciona el
     * pulsador de nueva venta */
    private void jbNewSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNewSaleActionPerformed

        // Definiciones locales
        int i;
        DefaultTableModel dtm;
        SaleMaint sm;
        ArrayList<SaleHeader> dataSaleH_ret;
        Object[] data;

        // Acceder a la nueva venta y luego se actualiza 
        // la info.de la venta en el JTable
        sm = new SaleMaint((Frame)this.getParent(), true, jtSalesList, 0, true);
        sm.setTitle("Nuevo Registro Servicios/Venta");
        sm.pack();
        sm.setVisible(true);
        dataSaleH_ret = sm.getSaleData();
        if (dataSaleH_ret.size() > 0) {
            dtm = (DefaultTableModel) jtSalesList.getModel();
            data = new Object[jtSalesList.getColumnCount()];
            i = 0;
            data[i++] = (Integer) dataSaleH_ret.get(0).getNumVenta();
            data[i++] = (Integer) dataSaleH_ret.get(0).getCodCliente();
            data[i++] = dataSaleH_ret.get(0).getNombre();
            data[i++] = dataSaleH_ret.get(0).getFechaVenta();
            dtm.addRow(data);

            // Seleccionar la nueva fila en el Jtable
            i = jtSalesList.getRowCount() - 1;
            jtSalesList.setRowSelectionInterval(i, i);
        }
    }//GEN-LAST:event_jbNewSaleActionPerformed

    /* Evento que se dispara cuando se acciona el
     * pulsador de eliminaci√≥n de una venta */
    private void jbElimSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbElimSaleActionPerformed

        // Definiciones locales
        int answer, sn, row;
        DefaultTableModel dtm;
        DbConnection dbc;
        Connection conDb;
        SaleHeader sh;
        SaleLines sl;

        // Determinar la fila seleccionada del JTable
        row = jtSalesList.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null,
                    "Es necesario seleccionar un registro de servicios/venta",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Popup eliminaci√≥n info.de la venta
        answer = JOptionPane.showConfirmDialog(null,
                "¬øRealmente desea eliminar el registro"
                + " " + "de servicios/venta seleccionado?",
                null,
                JOptionPane.YES_NO_OPTION);
        if (answer != 0) {
            return;
        }

        // Abrir la conexi√≥n a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
            conDb.setAutoCommit(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexi√≥n a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Eliminar la info.de las l√≠neas del registro de venta
            sn = (Integer) jtSalesList.getValueAt(row, 0);
            sl = new SaleLines(sn);
            sl.saveSaleLData(conDb, false, new ArrayList<SaleLines>());

            // Eliminar la info.de la cabecera del registro de venta
            sh = new SaleHeader(sn);
            sh.delSaleHData(conDb);

            // Confirmar la actualizaci√≥n en la BBDD
            conDb.commit();

            // Eliminar la cab.de la venta del JTable
            dtm = (DefaultTableModel) jtSalesList.getModel();
            dtm.removeRow(row);
        } catch (SQLException e) {
            // Fall√≥ la actualizaci√≥n en la BBDD
            try {
                conDb.rollback();
            } catch (SQLException e2) {
            }
            JOptionPane.showMessageDialog(null,
                    "No fue posible eliminar el registro de"
                    + " " + "servicios/venta (completamente)",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexi√≥n a la BBDD        
            try {
                conDb.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexi√≥n a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jbElimSaleActionPerformed

    /* Cargar la info.de las cabs.de todos los 
     * registros de ventas en el jTable */
    private void loadSalesH() {

        // Definiciones locales
        int i, j;
        DbConnection dbc;
        Connection conDb;
        SaleHeader sh;
        String[] columns;
        ArrayList<SaleHeader> dataSalesH;
        Object[][] data;

        // Abrir la conexi√≥n a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexi√≥n a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Cargar la info.de las cabs.de todos los 
            // registros de venta en el jTable
            sh = new SaleHeader();
            columns = sh.getAllColumns();
            dataSalesH = sh.getSalesHAllData(conDb);
            data = new Object[dataSalesH.size()][columns.length];
            for (i = 0; i < dataSalesH.size(); i++) {
                j = 0;
                data[i][j++] = dataSalesH.get(i).getNumVenta();
                data[i][j++] = dataSalesH.get(i).getCodCliente();
                data[i][j++] = dataSalesH.get(i).getNombre();
                data[i][j++] = dataSalesH.get(i).getFechaVenta();

            }
            jtSalesList.setModel(new javax.swing.table.DefaultTableModel(
                    data,
                    columns) {
                        Class[] types = new Class[]{
                            java.lang.Integer.class,
                            java.lang.Integer.class,
                            java.lang.String.class,
                            java.lang.String.class
                        };
                        boolean[] canEdit = new boolean[]{
                            false,
                            false,
                            false,
                            false};

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return types[columnIndex];
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex,
                                int columnIndex) {
                            return canEdit[columnIndex];
                        }
                    }
            );

            // Ajustar autom√°ticamente la anchura de las columnas
            jtSalesList.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
            resizeColWidthjTable(jtSalesList);

            // Situar el cursor en el campo de b√∫squeda
            jtfSalesSearch.requestFocus();
        } catch (SQLException e) {
            // Mensaje de error
            JOptionPane.showMessageDialog(null,
                    "No fue posible cargar la lista de"
                    + " " + "registros de servicios/venta",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexi√≥n a la BBDD        
            try {
                conDb.close();
                
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexi√≥n a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /* Ajustar la anchura de las columnas del jTable */
    private void resizeColWidthjTable(JTable table) {

        // Definiciones locales
        int column, row;
        int width, prefWidth, maxWidth;
        TableColumn tc;
        TableCellRenderer tcr;
        Component c;

        // Ajustar la anchura de las columnas del jTable
        for (column = 0; column < table.getColumnCount(); column++) {
            tc = table.getColumnModel().getColumn(column);
            prefWidth = tc.getMinWidth();
            maxWidth = tc.getMaxWidth();
            for (row = 0; row < table.getRowCount(); row++) {
                tcr = table.getCellRenderer(row, column);
                c = table.prepareRenderer(tcr, row, column);
                width = c.getPreferredSize().width
                        + table.getIntercellSpacing().width;
                prefWidth = Math.max(prefWidth, width);
                if (prefWidth >= maxWidth) {
                    prefWidth = maxWidth;
                    break;
                }
            }
            tc.setPreferredWidth(prefWidth);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesList.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesList.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesList.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesList.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                SalesList dialog = new SalesList(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbElimSale;
    private javax.swing.JButton jbNewSale;
    private javax.swing.JLabel jlSalesSearch;
    private javax.swing.JPanel jpFunctions;
    private javax.swing.JPanel jpSalesSearch;
    private javax.swing.JPanel jpSalestList;
    private javax.swing.JScrollPane jspSalesList;
    private javax.swing.JTable jtSalesList;
    private javax.swing.JTextField jtfSalesSearch;
    // End of variables declaration//GEN-END:variables
}
