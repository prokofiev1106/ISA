/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Articles;

import Miscellaneous.DbConnection;
import Miscellaneous.IVAType;
import Miscellaneous.ServType;
import Stock.Stock;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.WindowConstants;

/**
 *
 * @author egimenez
 */
public class ArtMaint extends javax.swing.JDialog {

    /**
     * Creates new form ArtMaint
     */
    private JTable jtArtList;
    private int codArticulo;
    private Boolean isNewArt;
    private ArrayList<Article> dataArt_ret;

    /* Constructor std. */
    public ArtMaint(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /* Constructor propio */
    public ArtMaint(java.awt.Frame parent, boolean modal,
            JTable jtArtList, int codArticulo, Boolean isNewArt) {
        super(parent, modal);
        this.jtArtList = jtArtList;
        this.codArticulo = codArticulo;
        this.isNewArt = isNewArt;
        this.dataArt_ret = new ArrayList<Article>();
        initComponents();
        if (this.isNewArt.equals(true)) {
            newArticle();
        } else {
            loadArticle();
        }
        jtfDescripcion.requestFocus();
        //this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpFunctions = new javax.swing.JPanel();
        jbModif = new javax.swing.JButton();
        jbPrevArt = new javax.swing.JButton();
        jbNextArt = new javax.swing.JButton();
        jbGyC = new javax.swing.JButton();
        jpObs = new javax.swing.JPanel();
        jspObs = new javax.swing.JScrollPane();
        jtaObs = new javax.swing.JTextArea();
        jpArtMaint = new javax.swing.JPanel();
        jlCodArticulo = new javax.swing.JLabel();
        jtfCodArticulo = new javax.swing.JTextField();
        jlDescripcion = new javax.swing.JLabel();
        jtfDescripcion = new javax.swing.JTextField();
        jlTipoIVA = new javax.swing.JLabel();
        jcbTipoIVA = new javax.swing.JComboBox();
        jlTipoServicio = new javax.swing.JLabel();
        jcbTipoServicio = new javax.swing.JComboBox();
        jlPrecioCompraII = new javax.swing.JLabel();
        jtfPrecioCompraII = new javax.swing.JTextField();
        jlPrecioVentaII = new javax.swing.JLabel();
        jtfPrecioVentaII = new javax.swing.JTextField();
        jlEURxUd1 = new javax.swing.JLabel();
        jlEURxUd2 = new javax.swing.JLabel();
        jlCantUdsT = new javax.swing.JLabel();
        jlCantUdsV = new javax.swing.JLabel();
        jlUds = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpFunctions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true));

        jbModif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/pencil-icon.png"))); // NOI18N
        jbModif.setToolTipText("Modificar el artículo");
        jbModif.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbModif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModifActionPerformed(evt);
            }
        });

        jbPrevArt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow-left-icon.png"))); // NOI18N
        jbPrevArt.setToolTipText("Artículo previo");
        jbPrevArt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbPrevArt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrevArtActionPerformed(evt);
            }
        });

        jbNextArt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow-right-icon.png"))); // NOI18N
        jbNextArt.setToolTipText("Próximo artículo");
        jbNextArt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbNextArt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNextArtActionPerformed(evt);
            }
        });

        jbGyC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/disk-save-yellow-icon.png"))); // NOI18N
        jbGyC.setToolTipText("Grabar el artículo y cerrar");
        jbGyC.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbGyC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGyCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpFunctionsLayout = new javax.swing.GroupLayout(jpFunctions);
        jpFunctions.setLayout(jpFunctionsLayout);
        jpFunctionsLayout.setHorizontalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFunctionsLayout.createSequentialGroup()
                .addComponent(jbModif, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbPrevArt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbNextArt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbGyC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jpFunctionsLayout.setVerticalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFunctionsLayout.createSequentialGroup()
                .addGroup(jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbPrevArt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbNextArt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbModif, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbGyC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jbPrevArt.getAccessibleContext().setAccessibleDescription("");

        jpObs.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Observaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jtaObs.setEditable(false);
        jtaObs.setColumns(20);
        jtaObs.setRows(5);
        jspObs.setViewportView(jtaObs);

        javax.swing.GroupLayout jpObsLayout = new javax.swing.GroupLayout(jpObs);
        jpObs.setLayout(jpObsLayout);
        jpObsLayout.setHorizontalGroup(
            jpObsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspObs, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jpObsLayout.setVerticalGroup(
            jpObsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpObsLayout.createSequentialGroup()
                .addComponent(jspObs, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jpArtMaint.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Datos Básicos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jlCodArticulo.setText("Código de artículo");
        jlCodArticulo.setToolTipText("");

        jtfCodArticulo.setEditable(false);
        jtfCodArticulo.setBackground(java.awt.SystemColor.controlHighlight);
        jtfCodArticulo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfCodArticulo.setText("jTextField1");

        jlDescripcion.setText("Descripción");
        jlDescripcion.setToolTipText("");

        jtfDescripcion.setEditable(false);
        jtfDescripcion.setText("jTextField2");

        jlTipoIVA.setText("Tipo de IVA");

        jcbTipoIVA.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbTipoIVA.setEnabled(false);

        jlTipoServicio.setText("Tipo de servicio");
        jlTipoServicio.setToolTipText("");

        jcbTipoServicio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbTipoServicio.setEnabled(false);

        jlPrecioCompraII.setText("Precio de compra x Ud. (IVA incluido)");
        jlPrecioCompraII.setToolTipText("");

        jtfPrecioCompraII.setEditable(false);
        jtfPrecioCompraII.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfPrecioCompraII.setText("jTextField5");

        jlPrecioVentaII.setText("Precio de venta x Ud. (IVA incluido)");
        jlPrecioVentaII.setToolTipText("");

        jtfPrecioVentaII.setEditable(false);
        jtfPrecioVentaII.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfPrecioVentaII.setText("jTextField6");

        jlEURxUd1.setText("(€ x Ud.)");
        jlEURxUd1.setToolTipText("");

        jlEURxUd2.setText("(€ x Ud.)");
        jlEURxUd2.setToolTipText("");

        jlCantUdsT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jlCantUdsT.setForeground(new java.awt.Color(0, 0, 204));
        jlCantUdsT.setText("Stock:");
        jlCantUdsT.setToolTipText("");

        jlCantUdsV.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlCantUdsV.setForeground(new java.awt.Color(0, 0, 204));
        jlCantUdsV.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlCantUdsV.setText("jLabel1");

        jlUds.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jlUds.setForeground(new java.awt.Color(0, 0, 204));
        jlUds.setText("Ud(s).");
        jlUds.setToolTipText("");

        javax.swing.GroupLayout jpArtMaintLayout = new javax.swing.GroupLayout(jpArtMaint);
        jpArtMaint.setLayout(jpArtMaintLayout);
        jpArtMaintLayout.setHorizontalGroup(
            jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpArtMaintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpArtMaintLayout.createSequentialGroup()
                        .addComponent(jlCodArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jpArtMaintLayout.createSequentialGroup()
                        .addGroup(jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlTipoServicio)
                            .addComponent(jlPrecioCompraII)
                            .addComponent(jlPrecioVentaII)
                            .addComponent(jlTipoIVA)
                            .addComponent(jlDescripcion))
                        .addGap(30, 30, 30)
                        .addGroup(jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfDescripcion)
                            .addGroup(jpArtMaintLayout.createSequentialGroup()
                                .addGroup(jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtfCodArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jpArtMaintLayout.createSequentialGroup()
                                        .addComponent(jtfPrecioVentaII, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jlEURxUd2))
                                    .addGroup(jpArtMaintLayout.createSequentialGroup()
                                        .addComponent(jtfPrecioCompraII, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jlEURxUd1))
                                    .addComponent(jcbTipoIVA, 0, 225, Short.MAX_VALUE)
                                    .addComponent(jcbTipoServicio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                                .addComponent(jlCantUdsT)
                                .addGap(18, 18, 18)
                                .addComponent(jlCantUdsV)
                                .addGap(18, 18, 18)
                                .addComponent(jlUds)))))
                .addContainerGap())
        );
        jpArtMaintLayout.setVerticalGroup(
            jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpArtMaintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jlCantUdsT)
                        .addComponent(jlCantUdsV)
                        .addComponent(jlUds))
                    .addGroup(jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jlCodArticulo)
                        .addComponent(jtfCodArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addGroup(jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDescripcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtfDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTipoIVA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbTipoIVA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTipoServicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbTipoServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlPrecioCompraII, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtfPrecioCompraII, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlEURxUd1))
                .addGap(12, 12, 12)
                .addGroup(jpArtMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlPrecioVentaII, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtfPrecioVentaII, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlEURxUd2))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jpFunctions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpObs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpArtMaint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpArtMaint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Evento que se dispara cuando se acciona el
     * pulsador de grabación del artículo */
    private void jbGyCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGyCActionPerformed

        // Definiciones locales
        int it, st;
        Boolean isArtInfoOk;
        DbConnection dbc;
        Connection conDb;
        Article art;
        Stock stk;
        ArrayList<Stock> dataStk;
        String[] split;
        Double pp, sp;

        // Verificar la info.del artículo
        isArtInfoOk = verifyArtInfo();
        if (isArtInfoOk == false) {
            this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
            return;
        }
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
            conDb.setAutoCommit(false);            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Grabar la info.del artículo  
            split = jcbTipoIVA.getSelectedItem().toString().split(". ");
            it = Integer.parseInt(split[0]);
            split = jcbTipoServicio.getSelectedItem().toString().split(". ");
            st = Integer.parseInt(split[0]);
            if (jtfPrecioCompraII.getText().trim().isEmpty()) {
                pp = 0.0;
            } else {
                pp = Double.parseDouble(jtfPrecioCompraII.getText()
                        .trim().replace(",", "."));
            }
            if (jtfPrecioVentaII.getText().trim().isEmpty()) {
                sp = 0.0;
            } else {
                sp = Double.parseDouble(jtfPrecioVentaII.getText()
                        .trim().replace(",", "."));
            }
            art = new Article(
                    Integer.parseInt(jtfCodArticulo.getText()),
                    jtfDescripcion.getText(),
                    it,
                    st,
                    pp,
                    sp,
                    jtaObs.getText(),
                    0);
            art.saveArtData(conDb, this.isNewArt);

            // Crear el artículo en el stock si es nuevo
            if (this.isNewArt.equals(true)) {
                stk = new Stock();
                dataStk = new ArrayList<Stock>();
                dataStk.add(new Stock(
                        Integer.parseInt(jtfCodArticulo.getText()),
                        0
                ));
                stk.saveStkData(conDb, dataStk, this.isNewArt);
            }

            // Confirmar la actualización en la BBDD
            conDb.commit();

            // Devolver la info.del artículo actualizado
            // al JDialog de la lista de artículos             
            this.dataArt_ret.add(new Article(
                    Integer.parseInt(jtfCodArticulo.getText()),
                    jtfDescripcion.getText(),
                    jcbTipoIVA.getSelectedItem().toString(),
                    jcbTipoServicio.getSelectedItem().toString(),
                    pp,
                    sp,
                    null,
                    0));
        } catch (SQLException e) {
            // Falló la actualización en la BBDD
            try {
                conDb.rollback();                
            } catch (SQLException e2) {
            }
            JOptionPane.showMessageDialog(null,
                    "No fue posible actualizar la info.del artículo",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();                
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }

        // Cerrar el JDialog        
        this.dispose();
    }//GEN-LAST:event_jbGyCActionPerformed

    /* Evento que se dispara cuando se acciona el
     * pulsador de modificación del artículo */
    private void jbModifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModifActionPerformed

        // Activar o hacer visibles los objetos del JDialog
        enableOrVisibleObjs();
    }//GEN-LAST:event_jbModifActionPerformed

    /* Evento que se dispara previo al
     * cierre del JDialog */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        // Definiciones locales
        int answer;

        // Popup grabación info.del artículo si se está en modo modificación
        if (jbGyC.isVisible() == true) {
            answer = JOptionPane.showConfirmDialog(null,
                    "¿Desea guardar los cambios?",
                    null,
                    JOptionPane.YES_NO_OPTION);
            if (answer == 0) {
                jbGyC.doClick();
                if (this.getDefaultCloseOperation() == WindowConstants.DO_NOTHING_ON_CLOSE) {
                    return;
                }
            }
        }
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_formWindowClosing

    /* Evento que se dispara cuando se acciona el pulsador
     * de artículo previo */
    private void jbPrevArtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrevArtActionPerformed

        // Definiciones locales
        int row;

        // Se accionó el pulsador de artículo anterior   
        row = jtArtList.getSelectedRow();
        if (row > 0) {
            row--;
            this.codArticulo = (Integer) jtArtList.getValueAt(row, 0);
            jtArtList.getSelectionModel().setSelectionInterval(row, row);
            loadArticle();
        }
    }//GEN-LAST:event_jbPrevArtActionPerformed

    /* Evento que se dispara cuando se acciona el pulsador
     * de artículo siguiente */
    private void jbNextArtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNextArtActionPerformed

        // Definiciones locales
        int row;

        // Se accionó el pulsador de artículo siguiente        
        row = jtArtList.getSelectedRow();
        if (row < jtArtList.getRowCount() - 1) {
            row++;
            this.codArticulo = (Integer) jtArtList.getValueAt(row, 0);
            jtArtList.getSelectionModel().setSelectionInterval(row, row);
            loadArticle();
        }
    }//GEN-LAST:event_jbNextArtActionPerformed

    /* Nuevo artículo */
    private void newArticle() {

        // Definiciones locales          
        DbConnection dbc;
        Connection conDb;
        Article art;

        // Activar o hacer visibles los objetos del JDialog
        enableOrVisibleObjs();

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Cargar la info.del artículo en los objetos del JDialog
            art = new Article();
            this.codArticulo = art.getNewArtCode(conDb);
            this.jtfCodArticulo.setText(String.valueOf(this.codArticulo));
            this.jtfDescripcion.setText(null);
            loadIVAType(conDb, 0);
            this.jcbTipoIVA.setSelectedIndex(0);
            loadServType(conDb, 0);
            this.jcbTipoServicio.setSelectedIndex(0);
            this.jtfPrecioCompraII.setText(null);
            this.jtfPrecioVentaII.setText(null);
            this.jtaObs.setText(null);
            this.jlCantUdsV.setText(String.valueOf(0));
        } catch (SQLException e) {
            // Mensaje de error
            JOptionPane.showMessageDialog(null,
                    "No fue posible determinar un código"
                    + "para el nuevo artículo",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();                
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /* Cargar la info.del artículo en los objetos del JDialog */
    private void loadArticle() {

        // Definiciones locales    
        DbConnection dbc;
        Connection conDb;
        ArrayList<Article> dataArt;
        Article art;

        // Hacer invisible el pulsador de grabación
        jbGyC.setVisible(false);

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Cargar la info.del artículo en los objetos del JDialog
            art = new Article(this.codArticulo);
            dataArt = art.getArtData(conDb);
            if (dataArt.size() > 0) {
                this.jtfCodArticulo.setText(String.valueOf(dataArt.get(0)
                        .getCodArticulo()));
                this.jtfDescripcion.setText(dataArt.get(0)
                        .getDescripcion());
                loadIVAType(conDb, (Integer) dataArt.get(0)
                        .getTipoIVA());
                loadServType(conDb, (Integer) dataArt.get(0)
                        .getTipoServicio());
                this.jtfPrecioCompraII.setText(String.valueOf(dataArt.get(0)
                        .getPrecioCompraII()).replace(".", ","));
                this.jtfPrecioVentaII.setText(String.valueOf(dataArt.get(0)
                        .getPrecioVentaII()).replace(".", ","));
                this.jtaObs.setText(dataArt.get(0)
                        .getObs());
                this.jlCantUdsV.setText(String.valueOf(dataArt.get(0)
                        .getCantUds()));
            }
        } catch (SQLException e) {
            // Mensaje de error
            JOptionPane.showMessageDialog(null,
                    "No fue posible cargar la info.del artículo",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();                
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /* Cargar los tipos de IVA en el jComboBox y seleccionar 
     * el actual del artículo, si es que lo tiene */
    private void loadIVAType(Connection conDb, int currIt) {

        // Definiciones locales
        int i;
        IVAType it;
        ArrayList<IVAType> data;
        String[] split;

        try {
            // Cargar en el jComboBox todos los tipos de IVA
            it = new IVAType();
            data = it.getAllIVATypes(conDb);
            jcbTipoIVA.removeAllItems();
            if (this.isNewArt == true) {
                jcbTipoIVA.addItem("Seleccionar ...");
            }
            for (i = 0; i < data.size(); i++) {
                jcbTipoIVA.addItem(data.get(i).getTipoIVA()
                        + ". " + data.get(i).getDescripcion());
            }

            // Activar el tipo de IVA ya asignado al artículo
            for (i = 1; i < jcbTipoIVA.getItemCount(); i++) {
                split = jcbTipoIVA.getItemAt(i).toString().split(". ");
                if (Integer.parseInt(split[0]) == currIt) {
                    jcbTipoIVA.setSelectedIndex(i);
                    break;
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible cargar los tipos de IVA",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /* Cargar los tipos de servicio en el jComboBox y seleccionar 
     * el actual del artículo, si es que lo tiene */
    private void loadServType(Connection conDb, int currSt) {

        // Definiciones locales
        int i;
        ServType st;
        ArrayList<ServType> data;
        String[] split;

        try {
            // Cargar en el jComboBox todos los tipos de servicio
            st = new ServType();
            data = st.getAllServTypes(conDb);
            jcbTipoServicio.removeAllItems();
            if (this.isNewArt == true) {
                jcbTipoServicio.addItem("Seleccionar ...");
            }
            for (i = 0; i < data.size(); i++) {
                jcbTipoServicio.addItem(data.get(i).getTipoServicio()
                        + ". " + data.get(i).getDescripcion());
            }

            // Activar el tipo de servicio ya asignado al artículo
            for (i = 1; i < jcbTipoServicio.getItemCount(); i++) {
                split = jcbTipoServicio.getItemAt(i).toString().split(". ");
                if (Integer.parseInt(split[0]) == currSt) {
                    jcbTipoServicio.setSelectedIndex(i);
                    break;
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible cargar los tipos de servicio",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /* Verificar la info.del artículo */
    private Boolean verifyArtInfo() {

        // Definiciones locales
        String msgTxt;
        Boolean isArtInfoOk;
        Double pp, sp;
        String[] split;

        // Verificar la info.del artículo
        msgTxt = null;
        isArtInfoOk = true;
        if (jtfDescripcion.getText().trim().isEmpty()) {
            jtfDescripcion.requestFocus();
            msgTxt = "Informar la descripción del artículo";
            isArtInfoOk = false;
        }
        if (isArtInfoOk == true) {
            if (this.isNewArt == true
                    && jcbTipoIVA.getSelectedIndex() == 0) {
                jcbTipoIVA.requestFocus();
                msgTxt = "Informar el tipo de IVA";
                isArtInfoOk = false;
            }
        }
        if (isArtInfoOk == true) {
            if (this.isNewArt == true
                    && jcbTipoServicio.getSelectedIndex() == 0) {
                jcbTipoServicio.requestFocus();
                msgTxt = "Informar el tipo de servicio";
                isArtInfoOk = false;
            }
        }
        if (isArtInfoOk == true) {
            if (!jtfPrecioCompraII.getText().trim().isEmpty()) {
                try {
                    pp = Double.parseDouble(jtfPrecioCompraII.getText()
                            .trim().replace(",", "."));
                    split = pp.toString().split("\\.");
                    if (split[1].length() > 2) {
                        jtfPrecioCompraII.requestFocus();
                        msgTxt = "El precio de compra debe poseer"
                                + " " + "2 decimales como máximo"
                                + " " + "(ej.precio correcto: 1234,56)";
                        isArtInfoOk = false;
                    }
                } catch (NumberFormatException e) {
                    jtfPrecioCompraII.requestFocus();
                    msgTxt = "El formato del precio de compra es incorrecto"
                            + " " + "(ej.precio correcto: 1234,56)";
                    isArtInfoOk = false;
                }
            }
        }
        if (isArtInfoOk == true) {
            if (!jtfPrecioVentaII.getText().trim().isEmpty()) {
                try {
                    sp = Double.parseDouble(jtfPrecioVentaII.getText()
                            .trim().replace(",", "."));
                    split = sp.toString().split("\\.");
                    if (split[1].length() > 2) {
                        jtfPrecioVentaII.requestFocus();
                        msgTxt = "El precio de venta debe poseer"
                                + " " + "2 decimales como máximo"
                                + " " + "(ej.precio correcto: 1234,56)";
                        isArtInfoOk = false;
                    }
                } catch (NumberFormatException e) {
                    jtfPrecioVentaII.requestFocus();
                    msgTxt = "El formato del precio de venta es incorrecto"
                            + " " + "(ej.precio correcto: 123,45)";
                    isArtInfoOk = false;
                }
            }
        }

        // Mostrar error si es que lo hay
        if (isArtInfoOk == false) {
            JOptionPane.showMessageDialog(null,
                    msgTxt,
                    null,
                    JOptionPane.ERROR_MESSAGE);
        }

        // Devolver flag verificación
        return isArtInfoOk;
    }

    /* Activar o hacer visibles los objetos del JDialog */
    private void enableOrVisibleObjs() {

        // Activar o hacer visibles los objetos del JDialog
        jtfDescripcion.setEditable(true);
        jcbTipoIVA.setEnabled(true);
        jcbTipoServicio.setEnabled(true);
        jtfPrecioCompraII.setEditable(true);
        jtfPrecioVentaII.setEditable(true);
        jtaObs.setEditable(true);
        jbGyC.setVisible(true);
        jbModif.setVisible(false);
        jbPrevArt.setVisible(false);
        jbNextArt.setVisible(false);
    }

    /* */
    public ArrayList<Article> getArtData() {
        return dataArt_ret;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArtMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArtMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArtMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArtMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ArtMaint dialog = new ArtMaint(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbGyC;
    private javax.swing.JButton jbModif;
    private javax.swing.JButton jbNextArt;
    private javax.swing.JButton jbPrevArt;
    private javax.swing.JComboBox jcbTipoIVA;
    private javax.swing.JComboBox jcbTipoServicio;
    private javax.swing.JLabel jlCantUdsT;
    private javax.swing.JLabel jlCantUdsV;
    private javax.swing.JLabel jlCodArticulo;
    private javax.swing.JLabel jlDescripcion;
    private javax.swing.JLabel jlEURxUd1;
    private javax.swing.JLabel jlEURxUd2;
    private javax.swing.JLabel jlPrecioCompraII;
    private javax.swing.JLabel jlPrecioVentaII;
    private javax.swing.JLabel jlTipoIVA;
    private javax.swing.JLabel jlTipoServicio;
    private javax.swing.JLabel jlUds;
    private javax.swing.JPanel jpArtMaint;
    private javax.swing.JPanel jpFunctions;
    private javax.swing.JPanel jpObs;
    private javax.swing.JScrollPane jspObs;
    private javax.swing.JTextArea jtaObs;
    private javax.swing.JTextField jtfCodArticulo;
    private javax.swing.JTextField jtfDescripcion;
    private javax.swing.JTextField jtfPrecioCompraII;
    private javax.swing.JTextField jtfPrecioVentaII;
    // End of variables declaration//GEN-END:variables
}
