/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Services;

import Miscellaneous.DbConnection;
import Sales.SaleLines;
import java.awt.Component;
import java.awt.Frame;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author egimenez
 */
public class ServList extends javax.swing.JDialog {

    /**
     * Creates new form ServList_cold
     *
     * @param parent
     * @param modal
     */
    private Boolean isToSel;
    private int codServicio_sel;
    private String descripcion_sel;
    private Double precioVentaII_sel;

    /* Constructor std. */
    public ServList(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /* Constructor propio */
    public ServList(java.awt.Frame parent, boolean modal, Boolean isToSel) {
        super(parent, modal);
        this.isToSel = isToSel;
        this.codServicio_sel = 0;
        this.descripcion_sel = null;
        this.precioVentaII_sel = 0.0;
        initComponents();
        loadServices();
        if (isToSel == false) {
//          this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        } else {
            this.jbNewServ.setVisible(false);
            this.jbElimServ.setVisible(false);
//          this.setExtendedState(JFrame.NORMAL);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpFunctions = new javax.swing.JPanel();
        jbNewServ = new javax.swing.JButton();
        jbElimServ = new javax.swing.JButton();
        jpServList = new javax.swing.JPanel();
        jspServList = new javax.swing.JScrollPane();
        jtServList = new javax.swing.JTable();
        jpaServSearch = new javax.swing.JPanel();
        jtfServSearch = new javax.swing.JTextField();
        jlServSearch = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jpFunctions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true));

        jbNewServ.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/plus-icon.png"))); // NOI18N
        jbNewServ.setToolTipText("Crear un nuevo servicio");
        jbNewServ.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbNewServ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNewServActionPerformed(evt);
            }
        });

        jbElimServ.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/minus-icon.png"))); // NOI18N
        jbElimServ.setToolTipText("Eliminar un servicio");
        jbElimServ.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbElimServ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbElimServActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpFunctionsLayout = new javax.swing.GroupLayout(jpFunctions);
        jpFunctions.setLayout(jpFunctionsLayout);
        jpFunctionsLayout.setHorizontalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFunctionsLayout.createSequentialGroup()
                .addComponent(jbNewServ, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbElimServ, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jpFunctionsLayout.setVerticalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jbNewServ, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
            .addComponent(jbElimServ, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
        );

        jpServList.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Relaci√≥n Servicios", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jtServList.setAutoCreateRowSorter(true);
        jtServList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jtServList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtServListMouseClicked(evt);
            }
        });
        jspServList.setViewportView(jtServList);

        javax.swing.GroupLayout jpServListLayout = new javax.swing.GroupLayout(jpServList);
        jpServList.setLayout(jpServListLayout);
        jpServListLayout.setHorizontalGroup(
            jpServListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jpServListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jspServList, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE))
        );
        jpServListLayout.setVerticalGroup(
            jpServListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 368, Short.MAX_VALUE)
            .addGroup(jpServListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jspServList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE))
        );

        jtfServSearch.setToolTipText("");
        jtfServSearch.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jtfServSearchCaretUpdate(evt);
            }
        });

        jlServSearch.setText("Filtro");

        javax.swing.GroupLayout jpaServSearchLayout = new javax.swing.GroupLayout(jpaServSearch);
        jpaServSearch.setLayout(jpaServSearchLayout);
        jpaServSearchLayout.setHorizontalGroup(
            jpaServSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpaServSearchLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jlServSearch)
                .addGap(18, 18, 18)
                .addComponent(jtfServSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(658, Short.MAX_VALUE))
        );
        jpaServSearchLayout.setVerticalGroup(
            jpaServSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpaServSearchLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpaServSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfServSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlServSearch))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jpServList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpaServSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpFunctions, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpaServSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpServList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Evento que se dispara cuando se acciona el
     * pulsador de nuevo servicio */
    private void jbNewServActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNewServActionPerformed

        // Definiciones locales
        int i;
        DefaultTableModel dtm;
        ServMaint sm;
        ArrayList<Service> dataServ_ret;
        Object[] data;

        // Acceder a la ficha del nuevo servicio y luego se actualiza 
        // la info.del servicio en el JTable
        sm = new ServMaint((Frame) this.getParent(), true, jtServList, 0, true);
        sm.setTitle("Nuevo Servicio");
        sm.pack();
        sm.setVisible(true);
        dataServ_ret = sm.getServData();
        if (dataServ_ret.size() > 0) {
            dtm = (DefaultTableModel) jtServList.getModel();
            data = new Object[jtServList.getColumnCount()];
            i = 0;
            data[i++] = dataServ_ret.get(0).getCodServicio();
            data[i++] = dataServ_ret.get(0).getDescripcion();
            data[i++] = dataServ_ret.get(0).getTipoIVA_desc();
            data[i++] = dataServ_ret.get(0).getTipoServicio_desc();
            data[i++] = dataServ_ret.get(0).getPrecioCosteII();
            data[i++] = dataServ_ret.get(0).getPrecioVentaII();
            dtm.addRow(data);

            // Seleccionar la nueva fila en el Jtable
            i = jtServList.getRowCount() - 1;
            jtServList.setRowSelectionInterval(i, i);
        }
    }//GEN-LAST:event_jbNewServActionPerformed

    /* Evento que se dispara cuando se acciona el
     * pulsador de eliminaci√≥n de un servicio */
    private void jbElimServActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbElimServActionPerformed

        // Definiciones locales
        int answer, sc, sn, row;
        Boolean verOk;
        DefaultTableModel dtm;
        DbConnection dbc;
        Connection conDb;
        Service serv;
        SaleLines sl;

        // Determinar la fila seleccionada del JTable
        row = jtServList.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null,
                    "Es necesario seleccionar un servicio",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Popup grabaci√≥n info.del servicio
        answer = JOptionPane.showConfirmDialog(null,
                "¬øRealmente desea eliminar el servicio seleccionado?",
                null,
                JOptionPane.YES_NO_OPTION);
        if (answer != 0) {
            return;
        }

        // Abrir la conexi√≥n a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
            conDb.setAutoCommit(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexi√≥n a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificaci√≥n Ok por defecto
        verOk = true;

        // Verificar si el servicio se utiliza en alg√∫n registro de venta
        sn = 0;
        sc = (Integer) jtServList.getValueAt(row, 0);
        sl = new SaleLines();
        try {
            sn = sl.verifyServ(conDb, sc);
        } catch (SQLException e) {
            // Mensaje de error
            JOptionPane.showMessageDialog(null,
                    "No fue posible verificar la utilizaci√≥n del servicio"
                    + " " + "en las l√≠neas de servicios/venta",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            verOk = false;
        }
        if (sn != 0) {
            JOptionPane.showMessageDialog(null,
                    "No es posible eliminar el servicio, ya que"
                    + " " + "se utiliza en el registro de servicios/venta"
                    + " " + "con n√∫m.doc.:" + " " + sn,
                    null,
                    JOptionPane.ERROR_MESSAGE);
            verOk = false;
        }
        if (verOk == false) {
            // Cerrar la conexi√≥n a la BBDD        
            try {
                conDb.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexi√≥n a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
            return;
        }

        try {
            // Eliminar toda la info.relacionada con el servicio
            sc = (Integer) jtServList.getValueAt(row, 0);
            serv = new Service(sc);
            serv.delServData(conDb);

            // Confirmar la actualizaci√≥n en la BBDD
            conDb.commit();

            // Eliminar el servicio del JTable
            dtm = (DefaultTableModel) jtServList.getModel();
            dtm.removeRow(row);
        } catch (SQLException e) {
            // Fall√≥ la actualizaci√≥n en la BBDD
            try {
                conDb.rollback();

            } catch (SQLException e2) {
            }
            JOptionPane.showMessageDialog(null,
                    "No fue posible eliminar el servicio",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexi√≥n a la BBDD        
            try {
                conDb.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexi√≥n a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jbElimServActionPerformed

    /* Evento que se dispara cuando se realiza 
     * un doble Click en una fila del JTable */
    private void jtServListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtServListMouseClicked

        int sc, row, col;
        String sd;
        Double sp;
        ServMaint sm;
        ArrayList<Service> dataServ_ret;

        // Con doble click se accede a la ficha del servicio y
        // luego se actualiza la info.del servicio en JTable o
        // se devuelve el c√≥digo y descripci√≥n del servicio si
        // el JDialog se llam√≥ para seleccionar un servicio
        if (evt.getClickCount() == 2) {
            row = jtServList.getSelectedRow();
            sc = (Integer) jtServList.getValueAt(row, 0);
            sd = jtServList.getValueAt(row, 1).toString();
            sp = (Double) jtServList.getValueAt(row, 5);
            if (this.isToSel == false) {
                sm = new ServMaint((Frame) this.getParent(), true, jtServList, sc, false);
                sm.setTitle("Visualizar/Actualizar Servicio");
                sm.pack();
                sm.setVisible(true);
                dataServ_ret = sm.getServData();
                if (dataServ_ret.size() > 0) {
                    row = jtServList.getSelectedRow();
                    col = 0;
                    jtServList.setValueAt(dataServ_ret.get(0).getCodServicio(), row, col++);
                    jtServList.setValueAt(dataServ_ret.get(0).getDescripcion(), row, col++);
                    jtServList.setValueAt(dataServ_ret.get(0).getTipoIVA_desc(), row, col++);
                    jtServList.setValueAt(dataServ_ret.get(0).getTipoServicio_desc(), row, col++);
                    jtServList.setValueAt(dataServ_ret.get(0).getPrecioCosteII(), row, col++);
                    jtServList.setValueAt(dataServ_ret.get(0).getPrecioVentaII(), row, col++);
                }
            } else {
                this.codServicio_sel = sc;
                this.descripcion_sel = sd;
                this.precioVentaII_sel = sp;
                this.dispose();
            }
        }
    }//GEN-LAST:event_jtServListMouseClicked

    /* Evento que se dispara cuando se realiza 
     * un cambio en el campo de b√∫squeda */
    private void jtfServSearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jtfServSearchCaretUpdate

        // Definiciones locales
        TableRowSorter<TableModel> trs;

        // Filtrar servicios s/campo de b√∫squeda
        trs = new TableRowSorter<TableModel>(((DefaultTableModel) jtServList.getModel()));
        trs.setRowFilter(RowFilter.regexFilter(jtfServSearch.getText()));
        jtServList.setRowSorter(trs);
    }//GEN-LAST:event_jtfServSearchCaretUpdate

    /* Cargar la info.de todos los servicios en el jTable */
    private void loadServices() {

        // Definiciones locales
        int i, j;
        DbConnection dbc;
        Connection conDb;
        Service serv;
        String[] columns;
        ArrayList<Service> dataServ;
        Object[][] data;

        // Abrir la conexi√≥n a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexi√≥n a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Cargar la info.de todos los servicios en el jTable
            serv = new Service();
            columns = serv.getAllColumns();
            dataServ = serv.getServAllData(conDb);
            data = new Object[dataServ.size()][columns.length];
            for (i = 0; i < dataServ.size(); i++) {
                j = 0;
                data[i][j++] = dataServ.get(i).getCodServicio();
                data[i][j++] = dataServ.get(i).getDescripcion();
                data[i][j++] = dataServ.get(i).getTipoIVA_desc();
                data[i][j++] = dataServ.get(i).getTipoServicio_desc();
                data[i][j++] = dataServ.get(i).getPrecioCosteII();
                data[i][j++] = dataServ.get(i).getPrecioVentaII();
            }
            jtServList.setModel(new javax.swing.table.DefaultTableModel(
                    data,
                    columns) {
                        Class[] types = new Class[]{
                            java.lang.Integer.class,
                            java.lang.String.class,
                            java.lang.String.class,
                            java.lang.String.class,
                            java.lang.Double.class,
                            java.lang.Double.class};
                        boolean[] canEdit = new boolean[]{
                            false,
                            false,
                            false,
                            false,
                            false,
                            false};

                        @Override
                        public Class getColumnClass(int columnIndex) {
                            return types[columnIndex];
                        }

                        @Override
                        public boolean isCellEditable(int rowIndex,
                                int columnIndex) {
                            return canEdit[columnIndex];
                        }
                    }
            );

            // Ajustar autom√°ticamente la anchura de las columnas
            jtServList.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
            resizeColWidthjTable(jtServList);

            // Situar el cursor en el campo de b√∫squeda
            jtfServSearch.requestFocus();
        } catch (SQLException e) {
            // Mensaje de error
            JOptionPane.showMessageDialog(null,
                    "No fue posible cargar la lista de servicios",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexi√≥n a la BBDD        
            try {
                conDb.close();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexi√≥n a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /* Ajustar la anchura de las columnas del jTable */
    private void resizeColWidthjTable(JTable table) {

        // Definiciones locales
        int column, row;
        int width, prefWidth, maxWidth;
        TableColumn tc;
        TableCellRenderer tcr;
        Component c;

        // Ajustar la anchura de las columnas del jTable
        for (column = 0; column < table.getColumnCount(); column++) {
            tc = table.getColumnModel().getColumn(column);
            prefWidth = tc.getMinWidth();
            maxWidth = tc.getMaxWidth();
            for (row = 0; row < table.getRowCount(); row++) {
                tcr = table.getCellRenderer(row, column);
                c = table.prepareRenderer(tcr, row, column);
                width = c.getPreferredSize().width
                        + table.getIntercellSpacing().width;
                prefWidth = Math.max(prefWidth, width);
                if (prefWidth >= maxWidth) {
                    prefWidth = maxWidth;
                    break;
                }
            }
            tc.setPreferredWidth(prefWidth);
        }
    }

    /* */
    public int getCodServicio_sel() {
        return codServicio_sel;
    }

    /* */
    public String getDescripcion_sel() {
        return descripcion_sel;
    }

    /* */
    public Double getPrecioVentaII_sel() {
        return precioVentaII_sel;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ServList dialog = new ServList(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbElimServ;
    private javax.swing.JButton jbNewServ;
    private javax.swing.JLabel jlServSearch;
    private javax.swing.JPanel jpFunctions;
    private javax.swing.JPanel jpServList;
    private javax.swing.JPanel jpaServSearch;
    private javax.swing.JScrollPane jspServList;
    private javax.swing.JTable jtServList;
    private javax.swing.JTextField jtfServSearch;
    // End of variables declaration//GEN-END:variables
}
