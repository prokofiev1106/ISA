/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Services;

import Miscellaneous.DbConnection;
import Miscellaneous.IVAType;
import Miscellaneous.ServType;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.WindowConstants;

/**
 *
 * @author egimenez
 */
public class ServMaint extends javax.swing.JDialog {

    /**
     * Creates new form ServMaint
     */
    private JTable jtServList;
    private int codServicio;
    private Boolean isNewServ;
    private ArrayList<Service> dataServ_ret;

    /* Constructor std. */
    public ServMaint(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /* Constructor propio */
    public ServMaint(java.awt.Frame parent, boolean modal,
            JTable jtServList, int codServicio, Boolean isNewServ) {
        super(parent, modal);
        this.jtServList = jtServList;
        this.codServicio = codServicio;
        this.isNewServ = isNewServ;
        this.dataServ_ret = new ArrayList<Service>();
        initComponents();
        if (this.isNewServ.equals(true)) {
            newService();
        } else {
            loadService();
        }
        jtfDescripcion.requestFocus();
        //this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpFunctions = new javax.swing.JPanel();
        jbGyC = new javax.swing.JButton();
        jbModif = new javax.swing.JButton();
        jbPrevServ = new javax.swing.JButton();
        jbNextServ = new javax.swing.JButton();
        jpObs = new javax.swing.JPanel();
        jspObs = new javax.swing.JScrollPane();
        jtaObs = new javax.swing.JTextArea();
        jpServMaint = new javax.swing.JPanel();
        jlCodServicio = new javax.swing.JLabel();
        jtfCodServicio = new javax.swing.JTextField();
        jlDescripcion = new javax.swing.JLabel();
        jtfDescripcion = new javax.swing.JTextField();
        jlTipoIVA = new javax.swing.JLabel();
        jcbTipoIVA = new javax.swing.JComboBox();
        jlTipoServicio = new javax.swing.JLabel();
        jcbTipoServicio = new javax.swing.JComboBox();
        jlPrecioCosteII = new javax.swing.JLabel();
        jtfPrecioCosteII = new javax.swing.JTextField();
        jlPrecioVentaII = new javax.swing.JLabel();
        jtfPrecioVentaII = new javax.swing.JTextField();
        jlEURxUd1 = new javax.swing.JLabel();
        jlEURxUd2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpFunctions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true));

        jbGyC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/disk-save-yellow-icon.png"))); // NOI18N
        jbGyC.setToolTipText("Grabar el servicio y cerrar");
        jbGyC.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbGyC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGyCActionPerformed(evt);
            }
        });

        jbModif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/pencil-icon.png"))); // NOI18N
        jbModif.setToolTipText("Modificar el servicio");
        jbModif.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbModif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModifActionPerformed(evt);
            }
        });

        jbPrevServ.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow-left-icon.png"))); // NOI18N
        jbPrevServ.setToolTipText("Servicio previo");
        jbPrevServ.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbPrevServ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrevServActionPerformed(evt);
            }
        });

        jbNextServ.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow-right-icon.png"))); // NOI18N
        jbNextServ.setToolTipText("Próximo servicio");
        jbNextServ.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbNextServ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNextServActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpFunctionsLayout = new javax.swing.GroupLayout(jpFunctions);
        jpFunctions.setLayout(jpFunctionsLayout);
        jpFunctionsLayout.setHorizontalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFunctionsLayout.createSequentialGroup()
                .addComponent(jbModif, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbPrevServ, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbNextServ, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbGyC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jpFunctionsLayout.setVerticalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jbModif, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jpFunctionsLayout.createSequentialGroup()
                .addGroup(jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbGyC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbPrevServ, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbNextServ, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jpObs.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Observaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jtaObs.setEditable(false);
        jtaObs.setColumns(20);
        jtaObs.setRows(5);
        jspObs.setViewportView(jtaObs);

        javax.swing.GroupLayout jpObsLayout = new javax.swing.GroupLayout(jpObs);
        jpObs.setLayout(jpObsLayout);
        jpObsLayout.setHorizontalGroup(
            jpObsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspObs, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jpObsLayout.setVerticalGroup(
            jpObsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspObs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
        );

        jpServMaint.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Datos Básicos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jlCodServicio.setText("Código de servicio");
        jlCodServicio.setToolTipText("");

        jtfCodServicio.setEditable(false);
        jtfCodServicio.setBackground(java.awt.SystemColor.controlHighlight);
        jtfCodServicio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfCodServicio.setText("jTextField1");

        jlDescripcion.setText("Descripción");
        jlDescripcion.setToolTipText("");

        jtfDescripcion.setEditable(false);
        jtfDescripcion.setText("jTextField2");

        jlTipoIVA.setText("Tipo de IVA");

        jcbTipoIVA.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbTipoIVA.setEnabled(false);

        jlTipoServicio.setText("Tipo de servicio");
        jlTipoServicio.setToolTipText("");

        jcbTipoServicio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbTipoServicio.setEnabled(false);

        jlPrecioCosteII.setText("Precio de coste x Ud. (IVA incluido)");
        jlPrecioCosteII.setToolTipText("");

        jtfPrecioCosteII.setEditable(false);
        jtfPrecioCosteII.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfPrecioCosteII.setText("jTextField5");

        jlPrecioVentaII.setText("Precio de venta x Ud. (IVA incluido)");
        jlPrecioVentaII.setToolTipText("");

        jtfPrecioVentaII.setEditable(false);
        jtfPrecioVentaII.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfPrecioVentaII.setText("jTextField6");

        jlEURxUd1.setText("(€ x Ud.)");
        jlEURxUd1.setToolTipText("");

        jlEURxUd2.setText("(€ x Ud.)");
        jlEURxUd2.setToolTipText("");

        javax.swing.GroupLayout jpServMaintLayout = new javax.swing.GroupLayout(jpServMaint);
        jpServMaint.setLayout(jpServMaintLayout);
        jpServMaintLayout.setHorizontalGroup(
            jpServMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpServMaintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpServMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpServMaintLayout.createSequentialGroup()
                        .addComponent(jlCodServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jpServMaintLayout.createSequentialGroup()
                        .addGroup(jpServMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlTipoServicio)
                            .addComponent(jlPrecioCosteII)
                            .addComponent(jlPrecioVentaII)
                            .addComponent(jlTipoIVA)
                            .addComponent(jlDescripcion))
                        .addGap(30, 30, 30)
                        .addGroup(jpServMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfDescripcion)
                            .addGroup(jpServMaintLayout.createSequentialGroup()
                                .addGroup(jpServMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtfCodServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jpServMaintLayout.createSequentialGroup()
                                        .addComponent(jtfPrecioVentaII, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jlEURxUd2))
                                    .addGroup(jpServMaintLayout.createSequentialGroup()
                                        .addComponent(jtfPrecioCosteII, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jlEURxUd1))
                                    .addComponent(jcbTipoIVA, 0, 225, Short.MAX_VALUE)
                                    .addComponent(jcbTipoServicio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 255, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jpServMaintLayout.setVerticalGroup(
            jpServMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpServMaintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpServMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlCodServicio)
                    .addComponent(jtfCodServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jpServMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDescripcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtfDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpServMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTipoIVA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbTipoIVA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpServMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTipoServicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbTipoServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jpServMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlPrecioCosteII, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtfPrecioCosteII, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlEURxUd1))
                .addGap(12, 12, 12)
                .addGroup(jpServMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlPrecioVentaII, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtfPrecioVentaII, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlEURxUd2))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jpFunctions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpObs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpServMaint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpServMaint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Evento que se dispara cuando se acciona el
     * pulsador de grabación del servicio */
    private void jbGyCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGyCActionPerformed

        // Definiciones locales
        Boolean isServInfoOk;
        DbConnection dbc;
        Connection conDb;
        Service serv;
        int j, it, st;
        String[] split;
        Double cp, sp;

        // Verificar la info.del servicio
        isServInfoOk = verifyServInfo();
        if (isServInfoOk == false) {
            this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
            return;
        }
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
            conDb.setAutoCommit(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Grabar la info.del servicio
            split = jcbTipoIVA.getSelectedItem().toString().split(". ");
            it = Integer.parseInt(split[0]);
            split = jcbTipoServicio.getSelectedItem().toString().split(". ");
            st = Integer.parseInt(split[0]);
            if (jtfPrecioCosteII.getText().trim().isEmpty()) {
                cp = 0.0;
            } else {
                cp = Double.parseDouble(jtfPrecioCosteII.getText()
                        .trim().replace(",", "."));
            }
            if (jtfPrecioVentaII.getText().trim().isEmpty()) {
                sp = 0.0;
            } else {
                sp = Double.parseDouble(jtfPrecioVentaII.getText()
                        .trim().replace(",", "."));
            }
            serv = new Service(
                    Integer.parseInt(jtfCodServicio.getText()),
                    jtfDescripcion.getText(),
                    it,
                    st,
                    cp,
                    sp,
                    jtaObs.getText());
            serv.saveServData(conDb, this.isNewServ);

            // Confirmar la actualización en la BBDD
            conDb.commit();

            // Devolver la info.del servicio actualizado
            // al JDialog de la lista de servicios   
            this.dataServ_ret.add(new Service(
                    Integer.parseInt(jtfCodServicio.getText()),
                    jtfDescripcion.getText(),
                    jcbTipoIVA.getSelectedItem().toString(),
                    jcbTipoServicio.getSelectedItem().toString(),
                    cp,
                    sp,
                    null));
        } catch (SQLException e) {
            // Falló la actualización en la BBDD
            try {
                conDb.rollback();
            } catch (SQLException e2) {
            }
            JOptionPane.showMessageDialog(null,
                    "No fue posible actualizar la info.del servicio",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }

        // Cerrar el JDialog        
        this.dispose();
    }//GEN-LAST:event_jbGyCActionPerformed

    /* Evento que se dispara cuando se acciona el
     * pulsador de modificación del servicio */
    private void jbModifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModifActionPerformed

        // Activar o hacer visibles los objetos del JDialog
        enableOrVisibleObjs();
    }//GEN-LAST:event_jbModifActionPerformed

    /* Evento que se dispara previo al
     * cierre del JDialog */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        // Definiciones locales
        int answer;

        // Popup grabación info.del servicio si se está en modo modificación
        if (jbGyC.isVisible() == true) {
            answer = JOptionPane.showConfirmDialog(null,
                    "¿Desea guardar los cambios?",
                    null,
                    JOptionPane.YES_NO_OPTION);
            if (answer == 0) {
                jbGyC.doClick();
                if (this.getDefaultCloseOperation() == WindowConstants.DO_NOTHING_ON_CLOSE) {
                    return;
                }
            }
        }
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_formWindowClosing

    /* Evento que se dispara cuando se acciona el pulsador
     * de servicio previo */
    private void jbPrevServActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrevServActionPerformed

        // Definiciones locales
        int row;

        // Se accionó el pulsador de servicio anterior   
        row = jtServList.getSelectedRow();
        if (row > 0) {
            row--;
            this.codServicio = (Integer) jtServList.getValueAt(row, 0);
            jtServList.getSelectionModel().setSelectionInterval(row, row);
            loadService();
        }
    }//GEN-LAST:event_jbPrevServActionPerformed

    /* Evento que se dispara cuando se acciona el pulsador
     * de servicio siguiente */
    private void jbNextServActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNextServActionPerformed

        // Definiciones locales
        int row;

        // Se accionó el pulsador de servicio siguiente        
        row = jtServList.getSelectedRow();
        if (row < jtServList.getRowCount() - 1) {
            row++;
            this.codServicio = (Integer) jtServList.getValueAt(row, 0);
            jtServList.getSelectionModel().setSelectionInterval(row, row);
            loadService();
        }
    }//GEN-LAST:event_jbNextServActionPerformed

    /* Nuevo servicio */
    private void newService() {

        // Definiciones locales 
        DbConnection dbc;
        Connection conDb;
        Service serv;

        // Activar o hacer visibles los objetos del JDialog
        enableOrVisibleObjs();

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Cargar la info.del servicio en los objetos del JDialog
            serv = new Service();
            this.codServicio = serv.getNewServCode(conDb);
            this.jtfCodServicio.setText(String.valueOf(this.codServicio));
            this.jtfDescripcion.setText(null);
            loadIVAType(conDb, 0);
            this.jcbTipoIVA.setSelectedIndex(0);
            loadServType(conDb, 0);
            this.jcbTipoServicio.setSelectedIndex(0);
            this.jtfPrecioCosteII.setText(null);
            this.jtfPrecioVentaII.setText(null);
            this.jtaObs.setText(null);
        } catch (SQLException e) {
            // Mensaje de error
            JOptionPane.showMessageDialog(null,
                    "No fue posible determinar un código para el nuevo servicio",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /* Cargar la info.del servicio en los objetos del JDialog */
    private void loadService() {

        // Definiciones locales      
        DbConnection dbc;
        Connection conDb;
        ArrayList<Service> dataServ;
        Service serv;

        // Hacer invisible el pulsador de grabación
        jbGyC.setVisible(false);

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Cargar la info.del servicio en los objetos del JDialog
            serv = new Service(this.codServicio);
            dataServ = serv.getServData(conDb);
            if (dataServ.size() > 0) {
                this.jtfCodServicio.setText(String.valueOf(dataServ.get(0)
                        .getCodServicio()));
                this.jtfDescripcion.setText(dataServ.get(0)
                        .getDescripcion());
                loadIVAType(conDb, (Integer) dataServ.get(0)
                        .getTipoIVA());
                loadServType(conDb, (Integer) dataServ.get(0)
                        .getTipoServicio());
                this.jtfPrecioCosteII.setText(String.valueOf(dataServ.get(0)
                        .getPrecioCosteII()).replace(".", ","));
                this.jtfPrecioVentaII.setText(String.valueOf(dataServ.get(0)
                        .getPrecioVentaII()).replace(".", ","));
                this.jtaObs.setText(String.valueOf(dataServ.get(0).getObs())
                        .replace(".", ","));
            }
        } catch (SQLException e) {
            // Mensaje de error
            JOptionPane.showMessageDialog(null,
                    "No fue posible cargar la info.del servicio",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /* Cargar los tipos de IVA en el jComboBox y seleccionar 
     * el actual del servicio, si es que lo tiene */
    private void loadIVAType(Connection conDb, int currIt) {

        // Definiciones locales
        int i;
        IVAType it;
        ArrayList<IVAType> data;
        String[] split;

        try {
            // Cargar en el jComboBox todos los tipos de IVA
            it = new IVAType();
            data = it.getAllIVATypes(conDb);
            jcbTipoIVA.removeAllItems();
            if (this.isNewServ == true) {
                jcbTipoIVA.addItem("Seleccionar ...");
            }
            for (i = 0; i < data.size(); i++) {
                jcbTipoIVA.addItem(data.get(i).getTipoIVA()
                        + ". " + data.get(i).getDescripcion());
            }

            // Activar el tipo de IVA ya asignado al servicio
            for (i = 1; i < jcbTipoIVA.getItemCount(); i++) {
                split = jcbTipoIVA.getItemAt(i).toString().split(". ");
                if (Integer.parseInt(split[0]) == currIt) {
                    jcbTipoIVA.setSelectedIndex(i);
                    break;
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible cargar los tipos de IVA",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    /* Cargar los tipos de servicio en el jComboBox y seleccionar 
     * el actual del servicio, si es que lo tiene */
    private void loadServType(Connection conDb, int currSt) {

        // Definiciones locales
        int i;
        ServType st;
        ArrayList<ServType> data;
        String[] split;

        try {
            // Cargar en el jComboBox todos los tipos de servicio
            st = new ServType();
            data = st.getAllServTypes(conDb);
            jcbTipoServicio.removeAllItems();
            if (this.isNewServ == true) {
                jcbTipoServicio.addItem("Seleccionar ...");
            }
            for (i = 0; i < data.size(); i++) {
                jcbTipoServicio.addItem(data.get(i).getTipoServicio()
                        + ". " + data.get(i).getDescripcion());
            }

            // Activar el tipo de servicio ya asignado al servicio
            for (i = 1; i < jcbTipoServicio.getItemCount(); i++) {
                split = jcbTipoServicio.getItemAt(i).toString().split(". ");
                if (Integer.parseInt(split[0]) == currSt) {
                    jcbTipoServicio.setSelectedIndex(i);
                    break;
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible cargar los tipos de servicio",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    /* Verificar la info.del servicio */
    private Boolean verifyServInfo() {

        // Definiciones locales
        String msgTxt;
        Boolean isServInfoOk;
        Double pp, sp;
        String[] split;

        // Verificar la info.del servicio
        msgTxt = null;
        isServInfoOk = true;
        if (jtfDescripcion.getText().trim().isEmpty()) {
            jtfDescripcion.requestFocus();
            msgTxt = "Informar la descripción del servicio";
            isServInfoOk = false;
        }
        if (isServInfoOk == true) {
            if (this.isNewServ == true
                    && jcbTipoIVA.getSelectedIndex() == 0) {
                jcbTipoIVA.requestFocus();
                msgTxt = "Informar el tipo de IVA";
                isServInfoOk = false;
            }
        }
        if (isServInfoOk == true) {
            if (this.isNewServ == true
                    && jcbTipoServicio.getSelectedIndex() == 0) {
                jcbTipoServicio.requestFocus();
                msgTxt = "Informar el tipo de servicio";
                isServInfoOk = false;
            }
        }
        if (isServInfoOk == true) {
            if (!jtfPrecioCosteII.getText().trim().isEmpty()) {
                try {
                    pp = Double.parseDouble(jtfPrecioCosteII.getText()
                            .trim().replace(",", "."));
                    split = pp.toString().split("\\.");
                    if (split[1].length() > 2) {
                        jtfPrecioCosteII.requestFocus();
                        msgTxt = "El precio de compra debe poseer"
                                + " " + "2 decimales como máximo"
                                + " " + "(ej.precio correcto: 1234,56)";
                        isServInfoOk = false;
                    }
                } catch (NumberFormatException e) {
                    jtfPrecioCosteII.requestFocus();
                    msgTxt = "El formato del precio de compra es incorrecto"
                            + " " + "(ej.precio correcto: 1234,56)";
                    isServInfoOk = false;
                }
            }
        }
        if (isServInfoOk == true) {
            if (!jtfPrecioVentaII.getText().trim().isEmpty()) {
                try {
                    sp = Double.parseDouble(jtfPrecioVentaII.getText()
                            .trim().replace(",", "."));
                    split = sp.toString().split("\\.");
                    if (split[1].length() > 2) {
                        jtfPrecioVentaII.requestFocus();
                        msgTxt = "El precio de venta debe poseer"
                                + " " + "2 decimales como máximo"
                                + " " + "(ej.precio correcto: 1234,56)";
                        isServInfoOk = false;
                    }
                } catch (NumberFormatException e) {
                    jtfPrecioVentaII.requestFocus();
                    msgTxt = "El formato del precio de venta es incorrecto"
                            + " " + "(ej.precio correcto: 123,45)";
                    isServInfoOk = false;
                }
            }
        }

        // Mostrar error si es que lo hay
        if (isServInfoOk == false) {
            JOptionPane.showMessageDialog(null,
                    msgTxt,
                    null,
                    JOptionPane.ERROR_MESSAGE);
        }

        // Devolver flag verificación
        return isServInfoOk;
    }

    /* Activar o hacer visibles los objetos del JDialog */
    private void enableOrVisibleObjs() {

        // Activar o hacer visibles los objetos del JDialog
        jtfDescripcion.setEditable(true);
        jcbTipoIVA.setEnabled(true);
        jcbTipoServicio.setEnabled(true);
        jtfPrecioCosteII.setEditable(true);
        jtfPrecioVentaII.setEditable(true);
        jtaObs.setEditable(true);
        jbGyC.setVisible(true);
        jbModif.setVisible(false);
        jbPrevServ.setVisible(false);
        jbNextServ.setVisible(false);
    }

    /* */
    public ArrayList<Service> getServData() {
        return dataServ_ret;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ServMaint dialog = new ServMaint(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbGyC;
    private javax.swing.JButton jbModif;
    private javax.swing.JButton jbNextServ;
    private javax.swing.JButton jbPrevServ;
    private javax.swing.JComboBox jcbTipoIVA;
    private javax.swing.JComboBox jcbTipoServicio;
    private javax.swing.JLabel jlCodServicio;
    private javax.swing.JLabel jlDescripcion;
    private javax.swing.JLabel jlEURxUd1;
    private javax.swing.JLabel jlEURxUd2;
    private javax.swing.JLabel jlPrecioCosteII;
    private javax.swing.JLabel jlPrecioVentaII;
    private javax.swing.JLabel jlTipoIVA;
    private javax.swing.JLabel jlTipoServicio;
    private javax.swing.JPanel jpFunctions;
    private javax.swing.JPanel jpObs;
    private javax.swing.JPanel jpServMaint;
    private javax.swing.JScrollPane jspObs;
    private javax.swing.JTextArea jtaObs;
    private javax.swing.JTextField jtfCodServicio;
    private javax.swing.JTextField jtfDescripcion;
    private javax.swing.JTextField jtfPrecioCosteII;
    private javax.swing.JTextField jtfPrecioVentaII;
    // End of variables declaration//GEN-END:variables
}
