/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Customers;

import Miscellaneous.DbConnection;
import Miscellaneous.ServType;
import Miscellaneous.ServTypesByCust;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.WindowConstants;

/**
 *
 * @author egimenek
 */
public class CustMaint extends javax.swing.JDialog {

    /**
     * Creates new form CustMaint
     */
    private JTable jtCustList;
    private int codCliente;
    private Boolean isNewCust;
    private ArrayList<Customer> dataCust_ret;

    /* Constructor std. */
    public CustMaint(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /* Constructor propio */
    public CustMaint(java.awt.Frame parent, boolean modal,
            JTable jtCustList, int codCliente, Boolean isNewCust) {
        super(parent, modal);
        this.jtCustList = jtCustList;
        this.codCliente = codCliente;
        this.isNewCust = isNewCust;
        this.dataCust_ret = new ArrayList<Customer>();
        initComponents();
        if (this.isNewCust.equals(true)) {
            newCustomer();
        } else {
            loadCustomer();
        }
        jtfNombre.requestFocus();
        //this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialike the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpObs = new javax.swing.JPanel();
        jspObs = new javax.swing.JScrollPane();
        jtaObs = new javax.swing.JTextArea();
        jpFunctions = new javax.swing.JPanel();
        jbGyC = new javax.swing.JButton();
        jbModif = new javax.swing.JButton();
        jbPrevCust = new javax.swing.JButton();
        jbNextCust = new javax.swing.JButton();
        jpCustMaint = new javax.swing.JPanel();
        jlCodCliente = new javax.swing.JLabel();
        jtfCodCliente = new javax.swing.JTextField();
        jlNombre = new javax.swing.JLabel();
        jtfNombre = new javax.swing.JTextField();
        jlDir = new javax.swing.JLabel();
        jtfDir = new javax.swing.JTextField();
        jlNIF = new javax.swing.JLabel();
        jtfNIF = new javax.swing.JTextField();
        jlTelFijo = new javax.swing.JLabel();
        jtfTelFijo = new javax.swing.JTextField();
        jlTelMovil = new javax.swing.JLabel();
        jtfTelMovil = new javax.swing.JTextField();
        jleMail = new javax.swing.JLabel();
        jtfeMail = new javax.swing.JTextField();
        jlFechaNac = new javax.swing.JLabel();
        jtfFechaNac = new javax.swing.JTextField();
        jcbFumador = new javax.swing.JCheckBox();
        jcbAutorizacion = new javax.swing.JCheckBox();
        jlCiudad = new javax.swing.JLabel();
        jtfCiudad = new javax.swing.JTextField();
        jjlCodPostal = new javax.swing.JLabel();
        jtfCodPostal = new javax.swing.JTextField();
        jpServTypes = new javax.swing.JPanel();
        jspServTypes = new javax.swing.JScrollPane();
        jlServTypes = new javax.swing.JList();
        jpAlerts = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaAlerta = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpObs.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Observaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jtaObs.setEditable(false);
        jtaObs.setColumns(20);
        jtaObs.setRows(5);
        jspObs.setViewportView(jtaObs);

        javax.swing.GroupLayout jpObsLayout = new javax.swing.GroupLayout(jpObs);
        jpObs.setLayout(jpObsLayout);
        jpObsLayout.setHorizontalGroup(
            jpObsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspObs)
        );
        jpObsLayout.setVerticalGroup(
            jpObsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspObs, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
        );

        jpFunctions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true));

        jbGyC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/disk-save-yellow-icon.png"))); // NOI18N
        jbGyC.setToolTipText("Grabar el cliente y cerrar");
        jbGyC.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbGyC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGyCActionPerformed(evt);
            }
        });

        jbModif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/pencil-icon.png"))); // NOI18N
        jbModif.setToolTipText("Modificar el cliente");
        jbModif.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbModif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModifActionPerformed(evt);
            }
        });

        jbPrevCust.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow-left-icon.png"))); // NOI18N
        jbPrevCust.setToolTipText("Cliente previo");
        jbPrevCust.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbPrevCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrevCustActionPerformed(evt);
            }
        });

        jbNextCust.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow-right-icon.png"))); // NOI18N
        jbNextCust.setToolTipText("Próximo cliente");
        jbNextCust.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbNextCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNextCustActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpFunctionsLayout = new javax.swing.GroupLayout(jpFunctions);
        jpFunctions.setLayout(jpFunctionsLayout);
        jpFunctionsLayout.setHorizontalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFunctionsLayout.createSequentialGroup()
                .addComponent(jbModif, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbPrevCust, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbNextCust, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbGyC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jpFunctionsLayout.setVerticalGroup(
            jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFunctionsLayout.createSequentialGroup()
                .addGroup(jpFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbGyC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbPrevCust, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbNextCust, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbModif, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jpCustMaint.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Datos Básicos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jlCodCliente.setLabelFor(jtfCodCliente);
        jlCodCliente.setText("Código de cliente");

        jtfCodCliente.setEditable(false);
        jtfCodCliente.setBackground(java.awt.SystemColor.controlHighlight);
        jtfCodCliente.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfCodCliente.setText("jTextField1");

        jlNombre.setLabelFor(jtfNombre);
        jlNombre.setText("Apellido y nombre");
        jlNombre.setToolTipText("");

        jtfNombre.setEditable(false);
        jtfNombre.setText("jTextField2");

        jlDir.setLabelFor(jtfDir);
        jlDir.setText("Dirección");

        jtfDir.setEditable(false);
        jtfDir.setText("jTextField3");

        jlNIF.setLabelFor(jtfNIF);
        jlNIF.setText("NIF");

        jtfNIF.setEditable(false);
        jtfNIF.setText("jTextField4");

        jlTelFijo.setLabelFor(jtfTelFijo);
        jlTelFijo.setText("Teléfono fijo");

        jtfTelFijo.setEditable(false);
        jtfTelFijo.setText("jTextField5");

        jlTelMovil.setLabelFor(jtfTelMovil);
        jlTelMovil.setText("Teléfono móvil");

        jtfTelMovil.setEditable(false);
        jtfTelMovil.setText("jTextField6");

        jleMail.setLabelFor(jtfeMail);
        jleMail.setText("e-mail");

        jtfeMail.setEditable(false);
        jtfeMail.setText("jTextField7");

        jlFechaNac.setLabelFor(jtfFechaNac);
        jlFechaNac.setText("Fecha nacimiento");

        jtfFechaNac.setEditable(false);
        jtfFechaNac.setText("jTextField8");

        jcbFumador.setText("Fuma?");
        jcbFumador.setToolTipText("");
        jcbFumador.setEnabled(false);

        jcbAutorizacion.setText("Autorización?");
        jcbAutorizacion.setEnabled(false);

        jlCiudad.setText("Ciudad");
        jlCiudad.setToolTipText("");

        jtfCiudad.setEditable(false);
        jtfCiudad.setText("jTextField1");

        jjlCodPostal.setText("Código postal");
        jjlCodPostal.setToolTipText("");

        jtfCodPostal.setEditable(false);
        jtfCodPostal.setText("jTextField2");

        javax.swing.GroupLayout jpCustMaintLayout = new javax.swing.GroupLayout(jpCustMaint);
        jpCustMaint.setLayout(jpCustMaintLayout);
        jpCustMaintLayout.setHorizontalGroup(
            jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCustMaintLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlCodCliente)
                    .addComponent(jlNombre)
                    .addComponent(jlDir)
                    .addComponent(jlNIF)
                    .addComponent(jlTelFijo)
                    .addComponent(jleMail)
                    .addComponent(jlCiudad))
                .addGap(18, 18, 18)
                .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpCustMaintLayout.createSequentialGroup()
                        .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfCodCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfeMail, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jtfNIF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                .addComponent(jtfTelFijo, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(18, 18, 18)
                        .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jjlCodPostal, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlFechaNac)
                            .addComponent(jlTelMovil)
                            .addComponent(jcbFumador))
                        .addGap(18, 18, 18)
                        .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfCodPostal)
                            .addComponent(jtfFechaNac, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(jtfTelMovil)
                            .addComponent(jcbAutorizacion))
                        .addGap(11, 11, 11))
                    .addGroup(jpCustMaintLayout.createSequentialGroup()
                        .addComponent(jtfNombre)
                        .addContainerGap())
                    .addGroup(jpCustMaintLayout.createSequentialGroup()
                        .addComponent(jtfDir)
                        .addContainerGap())))
        );
        jpCustMaintLayout.setVerticalGroup(
            jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCustMaintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlCodCliente)
                    .addComponent(jtfCodCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlNombre)
                    .addComponent(jtfNombre))
                .addGap(6, 6, 6)
                .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDir)
                    .addComponent(jtfDir))
                .addGap(6, 6, 6)
                .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlCiudad)
                    .addComponent(jtfCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jjlCodPostal)
                    .addComponent(jtfCodPostal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlNIF)
                    .addComponent(jtfNIF)
                    .addComponent(jlFechaNac)
                    .addComponent(jtfFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfTelMovil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlTelMovil)
                    .addComponent(jtfTelFijo)
                    .addComponent(jlTelFijo))
                .addGap(5, 5, 5)
                .addGroup(jpCustMaintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfeMail)
                    .addComponent(jleMail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbFumador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbAutorizacion))
                .addGap(11, 11, 11))
        );

        jpServTypes.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Tipo Servicios", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N
        jpServTypes.setPreferredSize(new java.awt.Dimension(192, 258));

        jlServTypes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jlServTypes.setEnabled(false);
        jlServTypes.setPreferredSize(new java.awt.Dimension(33, 75));
        jspServTypes.setViewportView(jlServTypes);

        javax.swing.GroupLayout jpServTypesLayout = new javax.swing.GroupLayout(jpServTypes);
        jpServTypes.setLayout(jpServTypesLayout);
        jpServTypesLayout.setHorizontalGroup(
            jpServTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspServTypes, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
        );
        jpServTypesLayout.setVerticalGroup(
            jpServTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspServTypes)
        );

        jpAlerts.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 153, 255), 1, true), "Alertas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jtaAlerta.setEditable(false);
        jtaAlerta.setColumns(20);
        jtaAlerta.setRows(5);
        jScrollPane1.setViewportView(jtaAlerta);

        javax.swing.GroupLayout jpAlertsLayout = new javax.swing.GroupLayout(jpAlerts);
        jpAlerts.setLayout(jpAlertsLayout);
        jpAlertsLayout.setHorizontalGroup(
            jpAlertsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
        );
        jpAlertsLayout.setVerticalGroup(
            jpAlertsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jpObs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpFunctions, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jpCustMaint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpAlerts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpServTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jpAlerts, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpCustMaint, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpServTypes, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpObs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Evento que se dispara cuando se acciona el
     * pulsador de grabación del cliente */
    private void jbGyCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGyCActionPerformed

        // Definiciones locales
        int i, k;
        Boolean isCustInfoOk;
        DbConnection dbc;
        Connection conDb;
        Customer cust;
        String[] split;
        Object[] gsv;
        int[] ts;

        // Verificar la info.del cliente
        isCustInfoOk = verifyCustInfo();
        if (isCustInfoOk == false) {
            this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
            return;
        }
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
            conDb.setAutoCommit(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Grabar la info.del cliente
            cust = new Customer(
                    Integer.parseInt(jtfCodCliente.getText()),
                    jtfNombre.getText(),
                    jtfDir.getText(),
                    jtfCiudad.getText(),
                    jtfCodPostal.getText(),
                    jtfNIF.getText(),
                    jtfTelFijo.getText(),
                    jtfTelMovil.getText(),
                    jtfeMail.getText(),
                    jtaAlerta.getText(),
                    jtfFechaNac.getText(),
                    jcbFumador.isSelected(),
                    jcbAutorizacion.isSelected(),
                    jtaObs.getText(),
                    0);
            cust.saveCustData(conDb, this.isNewCust);

            // Grabar los tipos de servicio del cliente            
            ServTypesByCust stbc = new ServTypesByCust();
            stbc.setCodCliente(Integer.parseInt(jtfCodCliente.getText()));
            gsv = jlServTypes.getSelectedValues();
            ts = new int[gsv.length];
            k = 0;
            for (i = 0; i < gsv.length; i++) {
                split = gsv[i].toString().split(". ");
                ts[k++] = Integer.parseInt(split[0]);
            }
            stbc.setTipoServicio(ts);
            stbc.saveServTypesByCust(conDb);

            // Confirmar la actualización en la BBDD
            conDb.commit();

            // Devolver la info.del cliente actualizado
            // al JDialog de la lista de cliente           
            dataCust_ret.add(new Customer(
                    Integer.parseInt(jtfCodCliente.getText()),
                    jtfNombre.getText(),
                    jtfDir.getText(),
                    jtfCiudad.getText(),
                    jtfCodPostal.getText(),
                    jtfNIF.getText(),
                    jtfTelFijo.getText(),
                    jtfTelMovil.getText(),
                    jtfeMail.getText(),
                    null,
                    jtfFechaNac.getText(),
                    jcbFumador.isSelected(),
                    jcbAutorizacion.isSelected(),
                    null,
                    0));
        } catch (SQLException e) {
            // Falló la actualización en la BBDD
            try {
                conDb.rollback();
            } catch (SQLException e2) {
            }
            JOptionPane.showMessageDialog(null,
                    "No fue posible actualizar la info.del cliente",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }

        // Cerrar el JDialog       
        this.dispose();
    }//GEN-LAST:event_jbGyCActionPerformed

    /* Evento que se dispara cuando se acciona el
     * pulsador de modificación del cliente */
    private void jbModifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModifActionPerformed

        // Activar o hacer visibles los objetos del JDialog
        enableOrVisibleObjs();
    }//GEN-LAST:event_jbModifActionPerformed

    /* Evento que se dispara previo al
     * cierre del JDialog */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        // Definiciones locales
        int answer;

        // Popup grabación info.del cliente si se está en modo modificación
        if (jbGyC.isVisible() == true) {
            answer = JOptionPane.showConfirmDialog(null,
                    "¿Desea guardar los cambios?",
                    null,
                    JOptionPane.YES_NO_OPTION);
            if (answer == 0) {
                jbGyC.doClick();
                if (this.getDefaultCloseOperation() == WindowConstants.DO_NOTHING_ON_CLOSE) {
                    return;
                }
            }
        }
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_formWindowClosing

    /* Evento que se dispara cuando se acciona el pulsador
     * de cliente previo */
    private void jbPrevCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrevCustActionPerformed

        // Definiciones locales
        int row;

        // Se accionó el pulsador de cliente anterior   
        row = jtCustList.getSelectedRow();
        if (row > 0) {
            row--;
            this.codCliente = (Integer) jtCustList.getValueAt(row, 0);
            jtCustList.getSelectionModel().setSelectionInterval(row, row);
            loadCustomer();
        }
    }//GEN-LAST:event_jbPrevCustActionPerformed

    /* Evento que se dispara cuando se acciona el pulsador
     * de cliente siguiente */
    private void jbNextCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNextCustActionPerformed

        // Definiciones locales
        int row;

        // Se accionó el pulsador de cliente siguiente        
        row = jtCustList.getSelectedRow();
        if (row < jtCustList.getRowCount() - 1) {
            row++;
            this.codCliente = (Integer) jtCustList.getValueAt(row, 0);
            jtCustList.getSelectionModel().setSelectionInterval(row, row);
            loadCustomer();
        }
    }//GEN-LAST:event_jbNextCustActionPerformed

    /* Nuevo cliente */
    private void newCustomer() {

        // Definiciones locales  
        DbConnection dbc;
        Connection conDb;
        Customer cust;

        // Activar o hacer visibles los objetos del JDialog
        enableOrVisibleObjs();

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Cargar la info.del cliente en los objetos del JDialog
            cust = new Customer();
            this.codCliente = cust.getNewCustCode(conDb);
            this.jtfCodCliente.setText(String.valueOf(this.codCliente));
            this.jtfNombre.setText(null);
            this.jtfDir.setText(null);
            this.jtfCiudad.setText(null);
            this.jtfCodPostal.setText(null);
            this.jtfNIF.setText(null);
            this.jtfTelFijo.setText(null);
            this.jtfTelMovil.setText(null);
            this.jtfeMail.setText(null);
            this.jtaAlerta.setText(null);
            this.jtfFechaNac.setText(null);
            this.jcbFumador.setSelected(false);
            this.jcbAutorizacion.setSelected(false);
            this.jtaObs.setText(null);
            loadServTypes(conDb);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible determinar un código para el nuevo cliente",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /* Cargar la info.del cliente en los objetos del JDialog */
    private void loadCustomer() {

        // Definiciones locales        
        DbConnection dbc;
        Connection conDb;
        ArrayList<Customer> dataCust;
        Customer cust;

        // Hacer invisible el pulsador de grabación
        jbGyC.setVisible(false);

        // Abrir la conexión a la BBDD  
        try {
            dbc = new DbConnection();
            conDb = dbc.getConBd();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible abrir la conexión a la Base de Datos",
                    null,
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Cargar la info.del cliente en los objetos del JDialog
            cust = new Customer(this.codCliente);
            dataCust = cust.getCustData(conDb);
            if (dataCust.size() > 0) {
                this.jtfCodCliente.setText(String.valueOf(dataCust.get(0).getCodCliente()));
                this.jtfNombre.setText(dataCust.get(0).getNombre());
                this.jtfDir.setText(dataCust.get(0).getDir());
                this.jtfCiudad.setText(dataCust.get(0).getCiudad());
                this.jtfCodPostal.setText(String.valueOf(dataCust.get(0).getCodPostal()));
                this.jtfNIF.setText(dataCust.get(0).getNif());
                this.jtfTelFijo.setText(dataCust.get(0).getTelFijo());
                this.jtfTelMovil.setText(dataCust.get(0).getTelMovil());
                this.jtfeMail.setText(dataCust.get(0).geteMail());
                this.jtaAlerta.setText(dataCust.get(0).getAlerta());
                this.jtfFechaNac.setText(dataCust.get(0).getFechaNac());
                this.jcbFumador.setSelected(dataCust.get(0).isFumador());
                this.jcbAutorizacion.setSelected(dataCust.get(0).isAutorizacion());
                this.jtaObs.setText(dataCust.get(0).getObs());
            }
            loadServTypes(conDb);
        } catch (SQLException e) {
            // Mensaje de error
            JOptionPane.showMessageDialog(null,
                    "No fue posible cargar la info.del cliente",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            // Cerrar la conexión a la BBDD        
            try {
                conDb.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null,
                        "No fue posible cerrar la conexión a la Base de Datos",
                        null,
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /* Cargar en el jList todos los tipos de servicios y
     * activar los ya asignados al cliente */
    private void loadServTypes(Connection conDb) {

        int i, j, k;
        ArrayList<ServType> st_data;
        ServType st;
        ArrayList<ServTypesByCust> stbc_data;
        ServTypesByCust stbc;
        DefaultListModel dlm;
        int[] ssi;
        String[] split;
        int currSt, currStbc;

        try {
            // Cargar en el jList todos los tipos de servicio        
            st = new ServType();
            st_data = st.getAllServTypes(conDb);
            dlm = new DefaultListModel();
            for (i = 0; i < st_data.size(); i++) {
                dlm.addElement(st_data.get(i).getTipoServicio()
                        + ". " + st_data.get(i).getDescripcion());
            }
            jlServTypes.setModel(dlm);

            // Activar los tipos de servicio ya asignados al cliente
            stbc = new ServTypesByCust(this.codCliente);
            stbc_data = stbc.getServTypesByCust(conDb);
            ssi = new int[stbc_data.size()];
            k = 0;
            for (i = 0; i < jlServTypes.getModel().getSize(); i++) {
                split = jlServTypes.getModel().getElementAt(i)
                        .toString().split(". ");
                currSt = Integer.parseInt(split[0]);
                for (j = 0; j < stbc_data.size(); j++) {
                    currStbc = (Integer) stbc_data.get(j).getCodCliente();
                    if (currStbc == currSt) {
                        ssi[k++] = i;
                        break;
                    }
                }
            }
            jlServTypes.setSelectedIndices(ssi);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "No fue posible cargar los tipos de servicio",
                    null,
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /* Verificar la info.del cliente */
    private Boolean verifyCustInfo() {

        // Definiciones locales
        String msgTxt;
        Boolean isCustInfoOk;
        SimpleDateFormat sdt;

        // Verificar la info.del cliente
        msgTxt = null;
        isCustInfoOk = true;
        if (jtfNombre.getText().trim().isEmpty()) {
            jtfNombre.requestFocus();
            msgTxt = "Informar el nombre del cliente";
            isCustInfoOk = false;
        } else if (jtfDir.getText().trim().isEmpty()) {
            jtfDir.requestFocus();
            msgTxt = "Informar la dirección del cliente";
            isCustInfoOk = false;
        } else {
            if (jtfFechaNac.getText().trim().isEmpty()) {
                jtfFechaNac.requestFocus();
                msgTxt = "Informar la fecha de nacimiento";
                isCustInfoOk = false;
            } else {
                try {
                    sdt = new SimpleDateFormat("dd-MM-yyyy");
                    sdt.setLenient(false);
                    sdt.parse(jtfFechaNac.getText());
                } catch (ParseException e) {
                    jtfFechaNac.requestFocus();
                    msgTxt = "El formato de la fecha de nacimiento es erróneo"
                            + " " + "(ej.fecha correcta: 31-12-1970)";
                    isCustInfoOk = false;
                }
            }
        }

        // Mostrar error si es que lo hay
        if (isCustInfoOk == false) {
            JOptionPane.showMessageDialog(null,
                    msgTxt,
                    null,
                    JOptionPane.ERROR_MESSAGE);
        }

        // Devolver flag verificación
        return isCustInfoOk;
    }

    /* Activar o hacer visibles los objetos del JDialog */
    private void enableOrVisibleObjs() {

        // Activar o hacer visibles los objetos del JDialog
        jtfNombre.setEditable(true);
        jtfDir.setEditable(true);
        jtfCiudad.setEditable(true);
        jtfCodPostal.setEditable(true);
        jtfNIF.setEditable(true);
        jtfTelFijo.setEditable(true);
        jtfTelMovil.setEditable(true);
        jtfeMail.setEditable(true);
        jtaAlerta.setEditable(true);
        jtfFechaNac.setEditable(true);
        jcbFumador.setEnabled(true);
        jcbAutorizacion.setEnabled(true);
        jtaObs.setEditable(true);
        jlServTypes.setEnabled(true);
        jbGyC.setVisible(true);
        jbModif.setVisible(false);
        jbPrevCust.setVisible(false);
        jbNextCust.setVisible(false);
    }

    /* */
    public ArrayList<Customer> getCustData() {
        return dataCust_ret;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustMaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                CustMaint dialog = new CustMaint(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbGyC;
    private javax.swing.JButton jbModif;
    private javax.swing.JButton jbNextCust;
    private javax.swing.JButton jbPrevCust;
    private javax.swing.JCheckBox jcbAutorizacion;
    private javax.swing.JCheckBox jcbFumador;
    private javax.swing.JLabel jjlCodPostal;
    private javax.swing.JLabel jlCiudad;
    private javax.swing.JLabel jlCodCliente;
    private javax.swing.JLabel jlDir;
    private javax.swing.JLabel jlFechaNac;
    private javax.swing.JLabel jlNIF;
    private javax.swing.JLabel jlNombre;
    private javax.swing.JList jlServTypes;
    private javax.swing.JLabel jlTelFijo;
    private javax.swing.JLabel jlTelMovil;
    private javax.swing.JLabel jleMail;
    private javax.swing.JPanel jpAlerts;
    private javax.swing.JPanel jpCustMaint;
    private javax.swing.JPanel jpFunctions;
    private javax.swing.JPanel jpObs;
    private javax.swing.JPanel jpServTypes;
    private javax.swing.JScrollPane jspObs;
    private javax.swing.JScrollPane jspServTypes;
    private javax.swing.JTextArea jtaAlerta;
    private javax.swing.JTextArea jtaObs;
    private javax.swing.JTextField jtfCiudad;
    private javax.swing.JTextField jtfCodCliente;
    private javax.swing.JTextField jtfCodPostal;
    private javax.swing.JTextField jtfDir;
    private javax.swing.JTextField jtfFechaNac;
    private javax.swing.JTextField jtfNIF;
    private javax.swing.JTextField jtfNombre;
    private javax.swing.JTextField jtfTelFijo;
    private javax.swing.JTextField jtfTelMovil;
    private javax.swing.JTextField jtfeMail;
    // End of variables declaration//GEN-END:variables
}
